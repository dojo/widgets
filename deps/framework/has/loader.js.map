{"version":3,"file":"loader.js","sourceRoot":"","sources":["loader.ts"],"names":[],"mappings":"","sourcesContent":["export interface Config {\n\tbaseUrl?: string;\n\tmap?: ModuleMap;\n\tpackages?: Package[];\n\tpaths?: { [path: string]: string };\n\tpkgs?: { [path: string]: Package };\n}\n\nexport interface ModuleMap extends ModuleMapItem {\n\t[sourceMid: string]: ModuleMapReplacement;\n}\n\nexport interface ModuleMapItem {\n\t[mid: string]: any;\n}\n\nexport interface ModuleMapReplacement extends ModuleMapItem {\n\t[findMid: string]: string;\n}\n\nexport interface Package {\n\tlocation?: string;\n\tmain?: string;\n\tname?: string;\n}\n\nexport interface Require {\n\t(dependencies: string[], callback: RequireCallback): void;\n\t<ModuleType>(moduleId: string): ModuleType;\n\n\ttoAbsMid(moduleId: string): string;\n\ttoUrl(path: string): string;\n}\n\nexport interface Has {\n\t(name: string): any;\n\tadd(\n\t\tname: string,\n\t\tvalue: (global: Window, document?: HTMLDocument, element?: HTMLDivElement) => any,\n\t\tnow?: boolean,\n\t\tforce?: boolean\n\t): void;\n\tadd(name: string, value: any, now?: boolean, force?: boolean): void;\n}\n\nexport type SignalType = 'error';\n\nexport interface RootRequire extends Require {\n\thas: Has;\n\ton(type: SignalType, listener: any): { remove: () => void };\n\tconfig(config: Config): void;\n\tinspect?(name: string): any;\n\tnodeRequire?(id: string): any;\n\tundef(moduleId: string): void;\n}\n\nexport interface RequireCallback {\n\t(...modules: any[]): void;\n}\n"]}