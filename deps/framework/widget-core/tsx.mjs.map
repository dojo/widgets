{"version":3,"file":"tsx.mjs","sourceRoot":"","sources":["../../../../src/widget-core/tsx.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAgB3B,MAAM,CAAC,MAAM,aAAa,GAAG,MAAM,CAAC,kDAAkD,CAAC,CAAC;AAExF,MAAM;IAAN;QAEC,eAAU,GAAM,EAAO,CAAC;IAEzB,CAAC;;AAHO,iBAAI,GAAG,aAAa,CAAC;AAK7B,MAAM,uBAA0B,GAAW;IAC1C,MAAM,MAAC,KAAM,SAAQ,YAAe;YAA7B;;gBACN,eAAU,GAAM,EAAO,CAAC;gBAExB,SAAI,GAAG,GAAG,CAAC;YACZ,CAAC;SAAA;QAFO,OAAI,GAAG,aAAc;WAE3B;;AACH,CAAC;AAED,wBAAwB,QAAe,EAAE,KAAU;IAClD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAAC,IAAI,CAAC,CAAC;QACP,MAAM,CAAC,CAAC,GAAG,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;AACF,CAAC;AAED,MAAM,cAAc,GAAQ,EAAE,UAAU,GAAG,EAAE,EAAE,GAAG,QAAe;IAChE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAC/C,UAAU,GAAG,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;IACnD,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAAC,IAAI,CAAC,CAAC;QACP,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;AACF,CAAC","sourcesContent":["import { v, w } from './d';\nimport { Constructor, DNode } from './interfaces';\nimport { WNode, VNodeProperties } from './interfaces';\n\ndeclare global {\n\tnamespace JSX {\n\t\ttype Element = WNode;\n\t\tinterface ElementAttributesProperty {\n\t\t\tproperties: {};\n\t\t}\n\t\tinterface IntrinsicElements {\n\t\t\t[key: string]: VNodeProperties;\n\t\t}\n\t}\n}\n\nexport const REGISTRY_ITEM = Symbol('Identifier for an item from the Widget Registry.');\n\nexport class FromRegistry<P> {\n\tstatic type = REGISTRY_ITEM;\n\tproperties: P = {} as P;\n\tname: string | undefined;\n}\n\nexport function fromRegistry<P>(tag: string): Constructor<FromRegistry<P>> {\n\treturn class extends FromRegistry<P> {\n\t\tproperties: P = {} as P;\n\t\tstatic type = REGISTRY_ITEM;\n\t\tname = tag;\n\t};\n}\n\nfunction spreadChildren(children: any[], child: any): any[] {\n\tif (Array.isArray(child)) {\n\t\treturn child.reduce(spreadChildren, children);\n\t} else {\n\t\treturn [...children, child];\n\t}\n}\n\nexport function tsx(tag: any, properties = {}, ...children: any[]): DNode {\n\tchildren = children.reduce(spreadChildren, []);\n\tproperties = properties === null ? {} : properties;\n\tif (typeof tag === 'string') {\n\t\treturn v(tag, properties, children);\n\t} else if (tag.type === REGISTRY_ITEM) {\n\t\tconst registryItem = new tag();\n\t\treturn w(registryItem.name, properties, children);\n\t} else {\n\t\treturn w(tag, properties, children);\n\t}\n}\n"]}