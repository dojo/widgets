{"version":3,"file":"RegistryHandler.mjs","sourceRoot":"","sources":["../../../../src/widget-core/RegistryHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Map } from '../shim/Map';\nimport { Evented } from '../core/Evented';\nimport { EventObject } from '../core/interfaces';\nimport { Constructor, InjectorFactory, InjectorItem, RegistryLabel, WidgetBaseInterface } from './interfaces';\nimport { Registry, RegistryEventObject, RegistryItem } from './Registry';\n\nexport type RegistryHandlerEventMap = {\n\tinvalidate: EventObject<'invalidate'>;\n};\n\nexport class RegistryHandler extends Evented<RegistryHandlerEventMap> {\n\tprivate _registry = new Registry();\n\tprivate _registryWidgetLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\tprivate _registryInjectorLabelMap: Map<Registry, RegistryLabel[]> = new Map();\n\tprotected baseRegistry?: Registry;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.own(this._registry);\n\t\tconst destroy = () => {\n\t\t\tif (this.baseRegistry) {\n\t\t\t\tthis._registryWidgetLabelMap.delete(this.baseRegistry);\n\t\t\t\tthis._registryInjectorLabelMap.delete(this.baseRegistry);\n\t\t\t\tthis.baseRegistry = undefined;\n\t\t\t}\n\t\t};\n\t\tthis.own({ destroy });\n\t}\n\n\tpublic set base(baseRegistry: Registry) {\n\t\tif (this.baseRegistry) {\n\t\t\tthis._registryWidgetLabelMap.delete(this.baseRegistry);\n\t\t\tthis._registryInjectorLabelMap.delete(this.baseRegistry);\n\t\t}\n\t\tthis.baseRegistry = baseRegistry;\n\t}\n\n\tpublic define(label: RegistryLabel, widget: RegistryItem): void {\n\t\tthis._registry.define(label, widget);\n\t}\n\n\tpublic defineInjector(label: RegistryLabel, injector: InjectorFactory): void {\n\t\tthis._registry.defineInjector(label, injector);\n\t}\n\n\tpublic has(label: RegistryLabel): boolean {\n\t\treturn this._registry.has(label) || Boolean(this.baseRegistry && this.baseRegistry.has(label));\n\t}\n\n\tpublic hasInjector(label: RegistryLabel): boolean {\n\t\treturn this._registry.hasInjector(label) || Boolean(this.baseRegistry && this.baseRegistry.hasInjector(label));\n\t}\n\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(\n\t\tlabel: RegistryLabel,\n\t\tglobalPrecedence: boolean = false\n\t): Constructor<T> | null {\n\t\treturn this._get(label, globalPrecedence, 'get', this._registryWidgetLabelMap);\n\t}\n\n\tpublic getInjector<T>(label: RegistryLabel, globalPrecedence: boolean = false): InjectorItem<T> | null {\n\t\treturn this._get(label, globalPrecedence, 'getInjector', this._registryInjectorLabelMap);\n\t}\n\n\tprivate _get(\n\t\tlabel: RegistryLabel,\n\t\tglobalPrecedence: boolean,\n\t\tgetFunctionName: 'getInjector' | 'get',\n\t\tlabelMap: Map<Registry, RegistryLabel[]>\n\t): any {\n\t\tconst registries = globalPrecedence ? [this.baseRegistry, this._registry] : [this._registry, this.baseRegistry];\n\t\tfor (let i = 0; i < registries.length; i++) {\n\t\t\tconst registry: any = registries[i];\n\t\t\tif (!registry) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst item = registry[getFunctionName](label);\n\t\t\tconst registeredLabels = labelMap.get(registry) || [];\n\t\t\tif (item) {\n\t\t\t\treturn item;\n\t\t\t} else if (registeredLabels.indexOf(label) === -1) {\n\t\t\t\tconst handle = registry.on(label, (event: RegistryEventObject) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tevent.action === 'loaded' &&\n\t\t\t\t\t\t(this as any)[getFunctionName](label, globalPrecedence) === event.item\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.emit({ type: 'invalidate' });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.own(handle);\n\t\t\t\tlabelMap.set(registry, [...registeredLabels, label]);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport default RegistryHandler;\n"]}