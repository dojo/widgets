{"version":3,"file":"Container.js","sourceRoot":"","sources":["Container.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,2CAA0C;IAC1C,8CAA4D;IAE5D,yBAAwB;IACxB,0DAAyD;IAIzD,mBACC,SAAyC,EACzC,IAAmB,EACnB,EAAmD;YAAjD,gCAAa;QAIf;YAA8B,2CAAoC;YAAlE;;YAIA,CAAC;YAHU,gCAAM,GAAhB;gBACC,MAAM,CAAC,KAAC,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrD,CAAC;YAHI,eAAe;gBAFpB,2BAAY,EAAE;gBACd,eAAM,CAAC,EAAE,IAAI,MAAA,EAAE,aAAa,eAAA,EAAE,CAAC;eAC1B,eAAe,CAIpB;YAAD,sBAAC;SAAA,AAJD,CAA8B,uBAAU,GAIvC;QACD,MAAM,CAAC,eAAe,CAAC;IACxB,CAAC;IAbD,8BAaC;IAED,kBAAe,SAAS,CAAC","sourcesContent":["import { WidgetBase } from './WidgetBase';\nimport { inject, GetProperties } from './decorators/inject';\nimport { Constructor, DNode, RegistryLabel } from './interfaces';\nimport { w } from './d';\nimport { alwaysRender } from './decorators/alwaysRender';\n\nexport type Container<T extends WidgetBase> = Constructor<WidgetBase<Partial<T['properties']>>>;\n\nexport function Container<W extends WidgetBase>(\n\tcomponent: Constructor<W> | RegistryLabel,\n\tname: RegistryLabel,\n\t{ getProperties }: { getProperties: GetProperties }\n): Container<W> {\n\t@alwaysRender()\n\t@inject({ name, getProperties })\n\tclass WidgetContainer extends WidgetBase<Partial<W['properties']>> {\n\t\tprotected render(): DNode {\n\t\t\treturn w(component, this.properties, this.children);\n\t\t}\n\t}\n\treturn WidgetContainer;\n}\n\nexport default Container;\n"]}