{"version":3,"file":"Projector.mjs","sourceRoot":"","sources":["../../../../../src/widget-core/mixins/Projector.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '../../core/lang';\nimport { Handle } from '../../core/interfaces';\nimport cssTransitions from '../animations/cssTransitions';\nimport { Constructor, DNode, Projection, ProjectionOptions } from './../interfaces';\nimport { WidgetBase } from './../WidgetBase';\nimport { afterRender } from './../decorators/afterRender';\nimport { v } from './../d';\nimport { Registry } from './../Registry';\nimport { dom } from './../vdom';\n\n/**\n * Represents the attach state of the projector\n */\nexport enum ProjectorAttachState {\n\tAttached = 1,\n\tDetached\n}\n\n/**\n * Attach type for the projector\n */\nexport enum AttachType {\n\tAppend = 1,\n\tMerge = 2\n}\n\nexport interface AttachOptions {\n\t/**\n\t * If `'append'` it will appended to the root. If `'merge'` it will merged with the root. If `'replace'` it will\n\t * replace the root.\n\t */\n\ttype: AttachType;\n\n\t/**\n\t * Element to attach the projector.\n\t */\n\troot?: Element;\n}\n\nexport interface ProjectorProperties {\n\tregistry?: Registry;\n}\n\nexport interface ProjectorMixin<P> {\n\treadonly properties: Readonly<P> & Readonly<ProjectorProperties>;\n\n\t/**\n\t * Append the projector to the root.\n\t */\n\tappend(root?: Element): Handle;\n\n\t/**\n\t * Merge the projector onto the root.\n\t *\n\t * The `root` and any of its `children` will be re-used.  Any excess DOM nodes will be ignored and any missing DOM nodes\n\t * will be created.\n\t * @param root The root element that the root virtual DOM node will be merged with.  Defaults to `document.body`.\n\t */\n\tmerge(root?: Element): Handle;\n\n\t/**\n\t * Attach the project to a _sandboxed_ document fragment that is not part of the DOM.\n\t *\n\t * When sandboxed, the `Projector` will run in a sync manner, where renders are completed within the same turn.\n\t * The `Projector` creates a `DocumentFragment` which replaces any other `root` that has been set.\n\t * @param doc The `Document` to use, which defaults to the global `document`.\n\t */\n\tsandbox(doc?: Document): void;\n\n\t/**\n\t * Sets the properties for the widget. Responsible for calling the diffing functions for the properties against the\n\t * previous properties. Runs though any registered specific property diff functions collecting the results and then\n\t * runs the remainder through the catch all diff function. The aggregate of the two sets of the results is then\n\t * set as the widget's properties\n\t *\n\t * @param properties The new widget properties\n\t */\n\tsetProperties(properties: this['properties']): void;\n\n\t/**\n\t * Sets the widget's children\n\t */\n\tsetChildren(children: DNode[]): void;\n\n\t/**\n\t * Return a `string` that represents the HTML of the current projection.  The projector needs to be attached.\n\t */\n\ttoHtml(): string;\n\n\t/**\n\t * Indicates if the projectors is in async mode, configured to `true` by defaults.\n\t */\n\tasync: boolean;\n\n\t/**\n\t * Root element to attach the projector\n\t */\n\troot: Element;\n\n\t/**\n\t * The status of the projector\n\t */\n\treadonly projectorState: ProjectorAttachState;\n\n\t/**\n\t * Runs registered destroy handles\n\t */\n\tdestroy(): void;\n}\n\nexport function ProjectorMixin<P, T extends Constructor<WidgetBase<P>>>(Base: T): T & Constructor<ProjectorMixin<P>> {\n\tabstract class Projector extends Base {\n\t\tpublic projectorState: ProjectorAttachState;\n\n\t\tprivate _root: Element = document.body;\n\t\tprivate _async = true;\n\t\tprivate _attachHandle: Handle | undefined;\n\t\tprivate _projectionOptions: Partial<ProjectionOptions>;\n\t\tprivate _projection: Projection | undefined;\n\t\tprivate _projectorProperties: this['properties'] = {} as this['properties'];\n\t\tpublic abstract properties: Readonly<P> & Readonly<ProjectorProperties>;\n\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args);\n\n\t\t\tthis._projectionOptions = {\n\t\t\t\ttransitions: cssTransitions\n\t\t\t};\n\n\t\t\tthis.root = document.body;\n\t\t\tthis.projectorState = ProjectorAttachState.Detached;\n\t\t}\n\n\t\tpublic append(root?: Element): Handle {\n\t\t\tconst options = {\n\t\t\t\ttype: AttachType.Append,\n\t\t\t\troot\n\t\t\t};\n\n\t\t\treturn this._attach(options);\n\t\t}\n\n\t\tpublic merge(root?: Element): Handle {\n\t\t\tconst options = {\n\t\t\t\ttype: AttachType.Merge,\n\t\t\t\troot\n\t\t\t};\n\n\t\t\treturn this._attach(options);\n\t\t}\n\n\t\tpublic set root(root: Element) {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot change root element');\n\t\t\t}\n\t\t\tthis._root = root;\n\t\t}\n\n\t\tpublic get root(): Element {\n\t\t\treturn this._root;\n\t\t}\n\n\t\tpublic get async(): boolean {\n\t\t\treturn this._async;\n\t\t}\n\n\t\tpublic set async(async: boolean) {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot change async mode');\n\t\t\t}\n\t\t\tthis._async = async;\n\t\t}\n\n\t\tpublic sandbox(doc: Document = document): void {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot create sandbox');\n\t\t\t}\n\t\t\tthis._async = false;\n\t\t\tconst previousRoot = this.root;\n\n\t\t\t/* free up the document fragment for GC */\n\t\t\tthis.own({\n\t\t\t\tdestroy: () => {\n\t\t\t\t\tthis._root = previousRoot;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._attach({\n\t\t\t\t/* DocumentFragment is not assignable to Element, but provides everything needed to work */\n\t\t\t\troot: doc.createDocumentFragment() as any,\n\t\t\t\ttype: AttachType.Append\n\t\t\t});\n\t\t}\n\n\t\tpublic setChildren(children: DNode[]): void {\n\t\t\tthis.__setChildren__(children);\n\t\t}\n\n\t\tpublic setProperties(properties: this['properties']): void {\n\t\t\tthis.__setProperties__(properties);\n\t\t}\n\n\t\tpublic __setProperties__(properties: this['properties']): void {\n\t\t\tif (this._projectorProperties && this._projectorProperties.registry !== properties.registry) {\n\t\t\t\tif (this._projectorProperties.registry) {\n\t\t\t\t\tthis._projectorProperties.registry.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._projectorProperties = assign({}, properties);\n\t\t\tsuper.__setCoreProperties__({ bind: this, baseRegistry: properties.registry });\n\t\t\tsuper.__setProperties__(properties);\n\t\t}\n\n\t\tpublic toHtml(): string {\n\t\t\tif (this.projectorState !== ProjectorAttachState.Attached || !this._projection) {\n\t\t\t\tthrow new Error('Projector is not attached, cannot return an HTML string of projection.');\n\t\t\t}\n\t\t\treturn (this._projection.domNode.childNodes[0] as Element).outerHTML;\n\t\t}\n\n\t\t@afterRender()\n\t\tpublic afterRender(result: DNode) {\n\t\t\tlet node = result;\n\t\t\tif (typeof result === 'string' || result === null || result === undefined) {\n\t\t\t\tnode = v('span', {}, [result]);\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\n\t\tpublic destroy() {\n\t\t\tsuper.destroy();\n\t\t}\n\n\t\tprivate _attach({ type, root }: AttachOptions): Handle {\n\t\t\tif (root) {\n\t\t\t\tthis.root = root;\n\t\t\t}\n\n\t\t\tif (this._attachHandle) {\n\t\t\t\treturn this._attachHandle;\n\t\t\t}\n\n\t\t\tthis.projectorState = ProjectorAttachState.Attached;\n\n\t\t\tconst handle = {\n\t\t\t\tdestroy: () => {\n\t\t\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\t\t\tthis._projection = undefined;\n\t\t\t\t\t\tthis.projectorState = ProjectorAttachState.Detached;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.own(handle);\n\t\t\tthis._attachHandle = handle;\n\n\t\t\tthis._projectionOptions = { ...this._projectionOptions, ...{ sync: !this._async } };\n\n\t\t\tswitch (type) {\n\t\t\t\tcase AttachType.Append:\n\t\t\t\t\tthis._projection = dom.append(this.root, this, this._projectionOptions);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttachType.Merge:\n\t\t\t\t\tthis._projection = dom.merge(this.root, this, this._projectionOptions);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn this._attachHandle;\n\t\t}\n\t}\n\n\treturn Projector;\n}\n\nexport default ProjectorMixin;\n"]}