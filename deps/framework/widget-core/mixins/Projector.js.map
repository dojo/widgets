{"version":3,"file":"Projector.js","sourceRoot":"","sources":["../../../../../src/widget-core/mixins/Projector.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '../../core/lang';\nimport { Handle } from '../../core/interfaces';\nimport cssTransitions from '../animations/cssTransitions';\nimport { Constructor, DNode, Projection, ProjectionOptions } from './../interfaces';\nimport { WidgetBase } from './../WidgetBase';\nimport { afterRender } from './../decorators/afterRender';\nimport { v } from './../d';\nimport { Registry } from './../Registry';\nimport { dom } from './../vdom';\n\n/**\n * Represents the attach state of the projector\n */\nexport enum ProjectorAttachState {\n\tAttached = 1,\n\tDetached\n}\n\n/**\n * Attach type for the projector\n */\nexport enum AttachType {\n\tAppend = 1,\n\tMerge = 2\n}\n\nexport interface AttachOptions {\n\t/**\n\t * If `'append'` it will appended to the root. If `'merge'` it will merged with the root. If `'replace'` it will\n\t * replace the root.\n\t */\n\ttype: AttachType;\n\n\t/**\n\t * Element to attach the projector.\n\t */\n\troot?: Element;\n}\n\nexport interface ProjectorProperties {\n\tregistry?: Registry;\n}\n\nexport interface ProjectorMixin<P> {\n\treadonly properties: Readonly<P> & Readonly<ProjectorProperties>;\n\n\t/**\n\t * Append the projector to the root.\n\t */\n\tappend(root?: Element): Handle;\n\n\t/**\n\t * Merge the projector onto the root.\n\t *\n\t * The `root` and any of its `children` will be re-used.  Any excess DOM nodes will be ignored and any missing DOM nodes\n\t * will be created.\n\t * @param root The root element that the root virtual DOM node will be merged with.  Defaults to `document.body`.\n\t */\n\tmerge(root?: Element): Handle;\n\n\t/**\n\t * Attach the project to a _sandboxed_ document fragment that is not part of the DOM.\n\t *\n\t * When sandboxed, the `Projector` will run in a sync manner, where renders are completed within the same turn.\n\t * The `Projector` creates a `DocumentFragment` which replaces any other `root` that has been set.\n\t * @param doc The `Document` to use, which defaults to the global `document`.\n\t */\n\tsandbox(doc?: Document): void;\n\n\t/**\n\t * Sets the properties for the widget. Responsible for calling the diffing functions for the properties against the\n\t * previous properties. Runs though any registered specific property diff functions collecting the results and then\n\t * runs the remainder through the catch all diff function. The aggregate of the two sets of the results is then\n\t * set as the widget's properties\n\t *\n\t * @param properties The new widget properties\n\t */\n\tsetProperties(properties: this['properties']): void;\n\n\t/**\n\t * Sets the widget's children\n\t */\n\tsetChildren(children: DNode[]): void;\n\n\t/**\n\t * Return a `string` that represents the HTML of the current projection.  The projector needs to be attached.\n\t */\n\ttoHtml(): string;\n\n\t/**\n\t * Indicates if the projectors is in async mode, configured to `true` by defaults.\n\t */\n\tasync: boolean;\n\n\t/**\n\t * Root element to attach the projector\n\t */\n\troot: Element;\n\n\t/**\n\t * The status of the projector\n\t */\n\treadonly projectorState: ProjectorAttachState;\n\n\t/**\n\t * Runs registered destroy handles\n\t */\n\tdestroy(): void;\n}\n\nexport function ProjectorMixin<P, T extends Constructor<WidgetBase<P>>>(Base: T): T & Constructor<ProjectorMixin<P>> {\n\tabstract class Projector extends Base {\n\t\tpublic projectorState: ProjectorAttachState;\n\n\t\tprivate _root: Element = document.body;\n\t\tprivate _async = true;\n\t\tprivate _attachHandle: Handle | undefined;\n\t\tprivate _projectionOptions: Partial<ProjectionOptions>;\n\t\tprivate _projection: Projection | undefined;\n\t\tprivate _projectorProperties: this['properties'] = {} as this['properties'];\n\t\tpublic abstract properties: Readonly<P> & Readonly<ProjectorProperties>;\n\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args);\n\n\t\t\tthis._projectionOptions = {\n\t\t\t\ttransitions: cssTransitions\n\t\t\t};\n\n\t\t\tthis.root = document.body;\n\t\t\tthis.projectorState = ProjectorAttachState.Detached;\n\t\t}\n\n\t\tpublic append(root?: Element): Handle {\n\t\t\tconst options = {\n\t\t\t\ttype: AttachType.Append,\n\t\t\t\troot\n\t\t\t};\n\n\t\t\treturn this._attach(options);\n\t\t}\n\n\t\tpublic merge(root?: Element): Handle {\n\t\t\tconst options = {\n\t\t\t\ttype: AttachType.Merge,\n\t\t\t\troot\n\t\t\t};\n\n\t\t\treturn this._attach(options);\n\t\t}\n\n\t\tpublic set root(root: Element) {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot change root element');\n\t\t\t}\n\t\t\tthis._root = root;\n\t\t}\n\n\t\tpublic get root(): Element {\n\t\t\treturn this._root;\n\t\t}\n\n\t\tpublic get async(): boolean {\n\t\t\treturn this._async;\n\t\t}\n\n\t\tpublic set async(async: boolean) {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot change async mode');\n\t\t\t}\n\t\t\tthis._async = async;\n\t\t}\n\n\t\tpublic sandbox(doc: Document = document): void {\n\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\tthrow new Error('Projector already attached, cannot create sandbox');\n\t\t\t}\n\t\t\tthis._async = false;\n\t\t\tconst previousRoot = this.root;\n\n\t\t\t/* free up the document fragment for GC */\n\t\t\tthis.own({\n\t\t\t\tdestroy: () => {\n\t\t\t\t\tthis._root = previousRoot;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._attach({\n\t\t\t\t/* DocumentFragment is not assignable to Element, but provides everything needed to work */\n\t\t\t\troot: doc.createDocumentFragment() as any,\n\t\t\t\ttype: AttachType.Append\n\t\t\t});\n\t\t}\n\n\t\tpublic setChildren(children: DNode[]): void {\n\t\t\tthis.__setChildren__(children);\n\t\t}\n\n\t\tpublic setProperties(properties: this['properties']): void {\n\t\t\tthis.__setProperties__(properties);\n\t\t}\n\n\t\tpublic __setProperties__(properties: this['properties']): void {\n\t\t\tif (this._projectorProperties && this._projectorProperties.registry !== properties.registry) {\n\t\t\t\tif (this._projectorProperties.registry) {\n\t\t\t\t\tthis._projectorProperties.registry.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._projectorProperties = assign({}, properties);\n\t\t\tsuper.__setCoreProperties__({ bind: this, baseRegistry: properties.registry });\n\t\t\tsuper.__setProperties__(properties);\n\t\t}\n\n\t\tpublic toHtml(): string {\n\t\t\tif (this.projectorState !== ProjectorAttachState.Attached || !this._projection) {\n\t\t\t\tthrow new Error('Projector is not attached, cannot return an HTML string of projection.');\n\t\t\t}\n\t\t\treturn (this._projection.domNode.childNodes[0] as Element).outerHTML;\n\t\t}\n\n\t\t@afterRender()\n\t\tpublic afterRender(result: DNode) {\n\t\t\tlet node = result;\n\t\t\tif (typeof result === 'string' || result === null || result === undefined) {\n\t\t\t\tnode = v('span', {}, [result]);\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\n\t\tpublic destroy() {\n\t\t\tsuper.destroy();\n\t\t}\n\n\t\tprivate _attach({ type, root }: AttachOptions): Handle {\n\t\t\tif (root) {\n\t\t\t\tthis.root = root;\n\t\t\t}\n\n\t\t\tif (this._attachHandle) {\n\t\t\t\treturn this._attachHandle;\n\t\t\t}\n\n\t\t\tthis.projectorState = ProjectorAttachState.Attached;\n\n\t\t\tconst handle = {\n\t\t\t\tdestroy: () => {\n\t\t\t\t\tif (this.projectorState === ProjectorAttachState.Attached) {\n\t\t\t\t\t\tthis._projection = undefined;\n\t\t\t\t\t\tthis.projectorState = ProjectorAttachState.Detached;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.own(handle);\n\t\t\tthis._attachHandle = handle;\n\n\t\t\tthis._projectionOptions = { ...this._projectionOptions, ...{ sync: !this._async } };\n\n\t\t\tswitch (type) {\n\t\t\t\tcase AttachType.Append:\n\t\t\t\t\tthis._projection = dom.append(this.root, this, this._projectionOptions);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttachType.Merge:\n\t\t\t\t\tthis._projection = dom.merge(this.root, this, this._projectionOptions);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn this._attachHandle;\n\t\t}\n\t}\n\n\treturn Projector;\n}\n\nexport default ProjectorMixin;\n"]}