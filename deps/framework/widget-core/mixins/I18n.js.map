{"version":3,"file":"I18n.js","sourceRoot":"","sources":["../../../../../src/widget-core/mixins/I18n.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:interface-name */\nimport i18n, { Bundle, formatMessage, getCachedMessages, Messages } from '../../i18n/i18n';\nimport Map from '../../shim/Map';\nimport { isVNode, decorate } from './../d';\nimport { afterRender } from './../decorators/afterRender';\nimport { inject } from './../decorators/inject';\nimport { Constructor, DNode, WidgetProperties, VNodeProperties } from './../interfaces';\nimport { Injector } from './../Injector';\nimport { Registry } from './../Registry';\nimport { WidgetBase } from './../WidgetBase';\n\nexport const INJECTOR_KEY = Symbol('i18n');\n\nexport interface LocaleData {\n\t/**\n\t * The locale for the widget. If not specified, then the root locale (as determined by `@dojo/i18n`) is assumed.\n\t * If specified, the widget's node will have a `lang` property set to the locale.\n\t */\n\tlocale?: string;\n\n\t/**\n\t * An optional flag indicating the widget's text direction. If `true`, then the underlying node's `dir`\n\t * property is set to \"rtl\". If it is `false`, then the `dir` property is set to \"ltr\". Otherwise, the property\n\t * is not set.\n\t */\n\trtl?: boolean;\n}\n\nexport interface I18nProperties extends LocaleData, WidgetProperties {\n\t/**\n\t * An optional override for the bundle passed to the `localizeBundle`. If the override contains a `messages` object,\n\t * then it will completely replace the underlying bundle. Otherwise, a new bundle will be created with the additional\n\t * locale loaders.\n\t */\n\ti18nBundle?: Bundle<Messages> | Map<Bundle<Messages>, Bundle<Messages>>;\n}\n\n/**\n * @private\n * An internal helper interface for defining locale and text direction attributes on widget nodes.\n */\ninterface I18nVNodeProperties extends VNodeProperties {\n\tdir: string;\n\tlang: string;\n}\n\nexport type LocalizedMessages<T extends Messages> = {\n\t/**\n\t * Indicates whether the messages are placeholders while waiting for the actual localized messages to load.\n\t * This is always `false` if the associated bundle does not list any supported locales.\n\t */\n\treadonly isPlaceholder: boolean;\n\n\t/**\n\t * Formats an ICU-formatted message template for the represented bundle.\n\t *\n\t * @param key\n\t * The message key.\n\t *\n\t * @param options\n\t * The values to pass to the formatter.\n\t *\n\t * @return\n\t * The formatted string.\n\t */\n\tformat(key: string, options?: any): string;\n\n\t/**\n\t * The localized messages if available, or either the default messages or a blank bundle depending on the\n\t * call signature for `localizeBundle`.\n\t */\n\treadonly messages: T;\n};\n\n/**\n * interface for I18n functionality\n */\nexport interface I18nMixin {\n\t/**\n\t * Return the cached messages for the specified bundle for the current locale, assuming they have already\n\t * been loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state\n\t * is updated.\n\t *\n\t * @param bundle\n\t * The required bundle object for which available locale messages should be loaded.\n\t *\n\t * @return\n\t * An object containing the localized messages, along with a `format` method for formatting ICU-formatted\n\t * templates and an `isPlaceholder` property indicating whether the returned messages are the defaults.\n\t */\n\tlocalizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T>;\n\n\tproperties: I18nProperties;\n}\n\nexport function registerI18nInjector(localeData: LocaleData, registry: Registry): Injector {\n\tconst injector = new Injector(localeData);\n\tregistry.defineInjector(INJECTOR_KEY, (invalidator) => {\n\t\tinjector.setInvalidator(invalidator);\n\t\treturn () => injector.get();\n\t});\n\treturn injector;\n}\n\nexport function I18nMixin<T extends Constructor<WidgetBase<any>>>(Base: T): T & Constructor<I18nMixin> {\n\t@inject({\n\t\tname: INJECTOR_KEY,\n\t\tgetProperties: (localeData: LocaleData, properties: I18nProperties) => {\n\t\t\tconst { locale = localeData.locale, rtl = localeData.rtl } = properties;\n\t\t\treturn { locale, rtl };\n\t\t}\n\t})\n\tabstract class I18n extends Base {\n\t\tpublic abstract properties: I18nProperties;\n\n\t\t/**\n\t\t * Return a localized messages object for the provided bundle, deferring to the `i18nBundle` property\n\t\t * when present. If the localized messages have not yet been loaded, return either a blank bundle or the\n\t\t * default messages.\n\t\t *\n\t\t * @param bundle\n\t\t * The bundle to localize\n\t\t *\n\t\t * @param useDefaults\n\t\t * If `true`, the default messages will be used when the localized messages have not yet been loaded. If `false`\n\t\t * (the default), then a blank bundle will be returned (i.e., each key's value will be an empty string).\n\t\t */\n\t\tpublic localizeBundle<T extends Messages>(\n\t\t\tbaseBundle: Bundle<T>,\n\t\t\tuseDefaults: boolean = false\n\t\t): LocalizedMessages<T> {\n\t\t\tconst bundle = this._resolveBundle(baseBundle);\n\t\t\tconst messages = this._getLocaleMessages(bundle);\n\t\t\tconst isPlaceholder = !messages;\n\t\t\tconst { locale } = this.properties;\n\t\t\tconst format =\n\t\t\t\tisPlaceholder && !useDefaults\n\t\t\t\t\t? (key: string, options?: any) => ''\n\t\t\t\t\t: (key: string, options?: any) => formatMessage(bundle, key, options, locale);\n\n\t\t\treturn Object.create({\n\t\t\t\tformat,\n\t\t\t\tisPlaceholder,\n\t\t\t\tmessages: messages || (useDefaults ? bundle.messages : this._getBlankMessages(bundle))\n\t\t\t});\n\t\t}\n\n\t\t@afterRender()\n\t\tprotected renderDecorator(result: DNode | DNode[]): DNode | DNode[] {\n\t\t\tdecorate(result, {\n\t\t\t\tmodifier: (node, breaker) => {\n\t\t\t\t\tconst { locale, rtl } = this.properties;\n\t\t\t\t\tconst properties: Partial<I18nVNodeProperties> = {};\n\t\t\t\t\tif (typeof rtl === 'boolean') {\n\t\t\t\t\t\tproperties['dir'] = rtl ? 'rtl' : 'ltr';\n\t\t\t\t\t}\n\t\t\t\t\tif (locale) {\n\t\t\t\t\t\tproperties['lang'] = locale;\n\t\t\t\t\t}\n\t\t\t\t\tnode.properties = { ...node.properties, ...properties };\n\t\t\t\t\tbreaker();\n\t\t\t\t},\n\t\t\t\tpredicate: isVNode\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t * Return a message bundle containing an empty string for each key in the provided bundle.\n\t\t *\n\t\t * @param bundle\n\t\t * The message bundle\n\t\t *\n\t\t * @return\n\t\t * The blank message bundle\n\t\t */\n\t\tprivate _getBlankMessages(bundle: Bundle<Messages>): Messages {\n\t\t\tconst blank = {} as Messages;\n\t\t\treturn Object.keys(bundle.messages).reduce((blank, key) => {\n\t\t\t\tblank[key] = '';\n\t\t\t\treturn blank;\n\t\t\t}, blank);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t * Return the cached dictionary for the specified bundle and locale, if it exists. If the requested dictionary does not\n\t\t * exist, then load it and update the instance's state with the appropriate messages.\n\t\t *\n\t\t * @param bundle\n\t\t * The bundle for which to load a locale-specific dictionary.\n\t\t *\n\t\t * @return\n\t\t * The locale-specific dictionary, if it has already been loaded and cached.\n\t\t */\n\t\tprivate _getLocaleMessages(bundle: Bundle<Messages>): Messages | void {\n\t\t\tconst { properties } = this;\n\t\t\tconst locale = properties.locale || i18n.locale;\n\t\t\tconst localeMessages = getCachedMessages(bundle, locale);\n\n\t\t\tif (localeMessages) {\n\t\t\t\treturn localeMessages;\n\t\t\t}\n\n\t\t\ti18n(bundle, locale).then(() => {\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t * Resolve the bundle to use for the widget's messages to either the provided bundle or to the\n\t\t * `i18nBundle` property.\n\t\t *\n\t\t * @param bundle\n\t\t * The base bundle\n\t\t *\n\t\t * @return\n\t\t * Either override bundle or the original bundle.\n\t\t */\n\t\tprivate _resolveBundle(bundle: Bundle<Messages>): Bundle<Messages> {\n\t\t\tlet { i18nBundle } = this.properties;\n\t\t\tif (i18nBundle) {\n\t\t\t\tif (i18nBundle instanceof Map) {\n\t\t\t\t\ti18nBundle = i18nBundle.get(bundle);\n\n\t\t\t\t\tif (!i18nBundle) {\n\t\t\t\t\t\treturn bundle;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn i18nBundle;\n\t\t\t}\n\t\t\treturn bundle;\n\t\t}\n\t}\n\n\treturn I18n;\n}\n\nexport default I18nMixin;\n"]}