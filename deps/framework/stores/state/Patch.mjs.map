{"version":3,"file":"Patch.mjs","sourceRoot":"","sources":["../../../../../src/stores/state/Patch.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pointer, walk, PointerTarget } from './Pointer';\n\nexport enum OperationType {\n\tADD = 'add',\n\tREMOVE = 'remove',\n\tREPLACE = 'replace',\n\tTEST = 'test'\n}\n\nexport interface BaseOperation<T = any, U = any> {\n\top: OperationType;\n\tpath: Pointer<T, U>;\n}\n\nexport interface AddPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.ADD;\n\tvalue: U;\n}\n\nexport interface RemovePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REMOVE;\n}\n\nexport interface ReplacePatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.REPLACE;\n\tvalue: U;\n}\n\nexport interface TestPatchOperation<T = any, U = any> extends BaseOperation<T, U> {\n\top: OperationType.TEST;\n\tvalue: U;\n}\n\nexport type PatchOperation<T = any, U = any> =\n\t| AddPatchOperation<T, U>\n\t| RemovePatchOperation<T, U>\n\t| ReplacePatchOperation<T, U>\n\t| TestPatchOperation<T, U>;\n\nexport interface PatchResult<T = any, U = any> {\n\tobject: T;\n\tundoOperations: PatchOperation<T, U>[];\n}\n\nfunction add(pointerTarget: PointerTarget, value: any): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 0, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction replace(pointerTarget: PointerTarget, value: any): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 1, value);\n\t} else {\n\t\tpointerTarget.target[pointerTarget.segment] = value;\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction remove(pointerTarget: PointerTarget): any {\n\tif (Array.isArray(pointerTarget.target)) {\n\t\tpointerTarget.target.splice(parseInt(pointerTarget.segment, 10), 1);\n\t} else {\n\t\tdelete pointerTarget.target[pointerTarget.segment];\n\t}\n\treturn pointerTarget.object;\n}\n\nfunction test(pointerTarget: PointerTarget, value: any) {\n\treturn isEqual(pointerTarget.target[pointerTarget.segment], value);\n}\n\nexport function isObject(value: any): value is Object {\n\treturn Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isEqual(a: any, b: any): boolean {\n\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\treturn a.length === b.length && a.every((element: any, i: number) => isEqual(element, b[i]));\n\t} else if (isObject(a) && isObject(b)) {\n\t\tconst keysForA = Object.keys(a).sort();\n\t\tconst keysForB = Object.keys(b).sort();\n\t\treturn isEqual(keysForA, keysForB) && keysForA.every((key) => isEqual(a[key], b[key]));\n\t} else {\n\t\treturn a === b;\n\t}\n}\n\nfunction inverse(operation: PatchOperation, state: any): PatchOperation[] {\n\tif (operation.op === OperationType.ADD) {\n\t\tconst op: RemovePatchOperation = {\n\t\t\top: OperationType.REMOVE,\n\t\t\tpath: operation.path\n\t\t};\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else if (operation.op === OperationType.REPLACE) {\n\t\tconst value = operation.path.get(state);\n\t\tlet op: RemovePatchOperation | ReplacePatchOperation;\n\t\tif (value === undefined) {\n\t\t\top = {\n\t\t\t\top: OperationType.REMOVE,\n\t\t\t\tpath: operation.path\n\t\t\t};\n\t\t} else {\n\t\t\top = {\n\t\t\t\top: OperationType.REPLACE,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t};\n\t\t}\n\t\tconst test: TestPatchOperation = {\n\t\t\top: OperationType.TEST,\n\t\t\tpath: operation.path,\n\t\t\tvalue: operation.value\n\t\t};\n\t\treturn [test, op];\n\t} else {\n\t\treturn [\n\t\t\t{\n\t\t\t\top: OperationType.ADD,\n\t\t\t\tpath: operation.path,\n\t\t\t\tvalue: operation.path.get(state)\n\t\t\t}\n\t\t];\n\t}\n}\n\nexport class Patch<T = any> {\n\tprivate _operations: PatchOperation<T>[];\n\n\tconstructor(operations: PatchOperation<T> | PatchOperation<T>[]) {\n\t\tthis._operations = Array.isArray(operations) ? operations : [operations];\n\t}\n\n\tpublic apply(object: any): PatchResult<T> {\n\t\tlet undoOperations: PatchOperation<T>[] = [];\n\t\tconst patchedObject = this._operations.reduce((patchedObject, next) => {\n\t\t\tlet object;\n\t\t\tconst pointerTarget = walk(next.path.segments, patchedObject);\n\t\t\tswitch (next.op) {\n\t\t\t\tcase OperationType.ADD:\n\t\t\t\t\tobject = add(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REPLACE:\n\t\t\t\t\tobject = replace(pointerTarget, next.value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.REMOVE:\n\t\t\t\t\tobject = remove(pointerTarget);\n\t\t\t\t\tbreak;\n\t\t\t\tcase OperationType.TEST:\n\t\t\t\t\tconst result = test(pointerTarget, next.value);\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\tthrow new Error('Test operation failure. Unable to apply any operations.');\n\t\t\t\t\t}\n\t\t\t\t\treturn patchedObject;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown operation');\n\t\t\t}\n\t\t\tundoOperations = [...inverse(next, patchedObject), ...undoOperations];\n\t\t\treturn object;\n\t\t}, object);\n\t\treturn { object: patchedObject, undoOperations };\n\t}\n}\n"]}