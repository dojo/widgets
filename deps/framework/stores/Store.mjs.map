{"version":3,"file":"Store.mjs","sourceRoot":"","sources":["../../../../src/stores/Store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Evented } from '../core/Evented';\nimport { Patch, PatchOperation } from './state/Patch';\nimport { Pointer } from './state/Pointer';\nimport Map from '../shim/Map';\n\n/**\n * The \"path\" to a value of type T on and object of type M. The path string is a JSON Pointer to the location of\n * `value` within `state`.\n *\n */\nexport interface Path<M, T> {\n\tpath: string;\n\tstate: M;\n\tvalue: T;\n}\n\n/**\n * An interface that enables typed traversal of an arbitrary type M. `path` and `at` can be used to generate\n * `Path`s that allow access to properties within M via the `get` method. The returned `Path`s can also be passed to the\n * utility methods `add`, `replace`, and `delete` in order to generate typed operations for modifying the state of a store.\n */\nexport interface State<M> {\n\tget<S>(path: Path<M, S>): S;\n\tpath<T, P0 extends keyof T>(path: Path<M, T>, a: P0): Path<M, T[P0]>;\n\tpath<T, P0 extends keyof T, P1 extends keyof T[P0]>(path: Path<M, T>, a: P0, b: P1): Path<M, T[P0][P1]>;\n\tpath<T, P0 extends keyof T, P1 extends keyof T[P0], P2 extends keyof T[P0][P1]>(\n\t\tpath: Path<M, T>,\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2\n\t): Path<M, T[P0][P1][P2]>;\n\tpath<T, P0 extends keyof T, P1 extends keyof T[P0], P2 extends keyof T[P0][P1], P3 extends keyof T[P0][P1][P2]>(\n\t\tpath: Path<M, T>,\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2,\n\t\td: P3\n\t): Path<M, T[P0][P1][P2][P3]>;\n\tpath<\n\t\tT,\n\t\tP0 extends keyof T,\n\t\tP1 extends keyof T[P0],\n\t\tP2 extends keyof T[P0][P1],\n\t\tP3 extends keyof T[P0][P1][P2],\n\t\tP4 extends keyof T[P0][P1][P2][P3]\n\t>(\n\t\tpath: Path<M, T>,\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2,\n\t\td: P3,\n\t\te: P4\n\t): Path<M, T[P0][P1][P2][P3][P4]>;\n\tpath<P0 extends keyof M>(a: P0): Path<M, M[P0]>;\n\tpath<P0 extends keyof M, P1 extends keyof M[P0]>(a: P0, b: P1): Path<M, M[P0][P1]>;\n\tpath<P0 extends keyof M, P1 extends keyof M[P0], P2 extends keyof M[P0][P1]>(\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2\n\t): Path<M, M[P0][P1][P2]>;\n\tpath<P0 extends keyof M, P1 extends keyof M[P0], P2 extends keyof M[P0][P1], P3 extends keyof M[P0][P1][P2]>(\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2,\n\t\td: P3\n\t): Path<M, M[P0][P1][P2][P3]>;\n\tpath<\n\t\tP0 extends keyof M,\n\t\tP1 extends keyof M[P0],\n\t\tP2 extends keyof M[P0][P1],\n\t\tP3 extends keyof M[P0][P1][P2],\n\t\tP4 extends keyof M[P0][P1][P2][P3]\n\t>(\n\t\ta: P0,\n\t\tb: P1,\n\t\tc: P2,\n\t\td: P3,\n\t\te: P4\n\t): Path<M, M[P0][P1][P2][P3][P4]>;\n\tat<S extends Path<M, Array<any>>>(path: S, index: number): Path<M, S['value'][0]>;\n}\n\ninterface OnChangeCallback {\n\tcallbackId: number;\n\tcallback: () => void;\n}\n\ninterface OnChangeValue {\n\tcallbacks: OnChangeCallback[];\n\tpreviousValue: any;\n}\n\nfunction isString(segment?: string): segment is string {\n\treturn typeof segment === 'string';\n}\n\n/**\n * Application state store\n */\nexport class Store<T = any> extends Evented implements State<T> {\n\t/**\n\t * The private state object\n\t */\n\tprivate _state = {} as T;\n\n\tprivate _changePaths = new Map<string, OnChangeValue>();\n\n\tprivate _callbackId = 0;\n\n\t/**\n\t * Returns the state at a specific pointer path location.\n\t */\n\tpublic get = <U = any>(path: Path<T, U>): U => {\n\t\treturn path.value;\n\t};\n\n\t/**\n\t * Applies store operations to state and returns the undo operations\n\t */\n\tpublic apply = (operations: PatchOperation<T>[], invalidate: boolean = false): PatchOperation<T>[] => {\n\t\tconst patch = new Patch(operations);\n\t\tconst patchResult = patch.apply(this._state);\n\t\tthis._state = patchResult.object;\n\t\tif (invalidate) {\n\t\t\tthis.invalidate();\n\t\t}\n\t\treturn patchResult.undoOperations;\n\t};\n\n\tpublic at = <U = any>(path: Path<T, Array<U>>, index: number): Path<T, U> => {\n\t\tconst array = this.get(path);\n\t\tconst value = array && array[index];\n\n\t\treturn {\n\t\t\tpath: `${path.path}/${index}`,\n\t\t\tstate: path.state,\n\t\t\tvalue\n\t\t};\n\t};\n\n\tpublic onChange = <U = any>(paths: Path<T, U> | Path<T, U>[], callback: () => void) => {\n\t\tconst callbackId = this._callbackId;\n\t\tif (!Array.isArray(paths)) {\n\t\t\tpaths = [paths];\n\t\t}\n\t\tpaths.forEach((path) => this._addOnChange(path, callback, callbackId));\n\t\tthis._callbackId += 1;\n\t\treturn {\n\t\t\tremove: () => {\n\t\t\t\t(paths as Path<T, U>[]).forEach((path) => {\n\t\t\t\t\tconst onChange = this._changePaths.get(path.path);\n\t\t\t\t\tif (onChange) {\n\t\t\t\t\t\tonChange.callbacks = onChange.callbacks.filter((callback) => {\n\t\t\t\t\t\t\treturn callback.callbackId !== callbackId;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t};\n\n\tprivate _addOnChange = <U = any>(path: Path<T, U>, callback: () => void, callbackId: number): void => {\n\t\tlet changePaths = this._changePaths.get(path.path);\n\t\tif (!changePaths) {\n\t\t\tchangePaths = { callbacks: [], previousValue: this.get(path) };\n\t\t}\n\t\tchangePaths.callbacks.push({ callbackId, callback });\n\t\tthis._changePaths.set(path.path, changePaths);\n\t};\n\n\tprivate _runOnChanges() {\n\t\tconst callbackIdsCalled: number[] = [];\n\t\tthis._changePaths.forEach((value: OnChangeValue, path: string) => {\n\t\t\tconst { previousValue, callbacks } = value;\n\t\t\tconst newValue = new Pointer(path).get(this._state);\n\t\t\tif (previousValue !== newValue) {\n\t\t\t\tthis._changePaths.set(path, { callbacks, previousValue: newValue });\n\t\t\t\tcallbacks.forEach((callbackItem) => {\n\t\t\t\t\tconst { callback, callbackId } = callbackItem;\n\t\t\t\t\tif (callbackIdsCalled.indexOf(callbackId) === -1) {\n\t\t\t\t\t\tcallbackIdsCalled.push(callbackId);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Emits an invalidation event\n\t */\n\tpublic invalidate(): any {\n\t\tthis._runOnChanges();\n\t\tthis.emit({ type: 'invalidate' });\n\t}\n\n\tpublic path: State<T>['path'] = (path: string | Path<T, any>, ...segments: (string | undefined)[]) => {\n\t\tif (typeof path === 'string') {\n\t\t\tsegments = [path, ...segments];\n\t\t} else {\n\t\t\tsegments = [...new Pointer(path.path).segments, ...segments];\n\t\t}\n\n\t\tconst stringSegments = segments.filter<string>(isString);\n\t\tconst hasMultipleSegments = stringSegments.length > 1;\n\t\tconst pointer = new Pointer(hasMultipleSegments ? stringSegments : stringSegments[0] || '');\n\n\t\treturn {\n\t\t\tpath: pointer.path,\n\t\t\tstate: this._state,\n\t\t\tvalue: pointer.get(this._state)\n\t\t};\n\t};\n}\n\nexport default Store;\n"]}