{"version":3,"file":"assertRender.mjs","sourceRoot":"","sources":["assertRender.ts"],"names":[],"mappings":"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","sourcesContent":["import { DNode, WNode, VNode, DefaultWidgetBaseInterface, Constructor } from '../../widget-core/interfaces';\nimport { isWNode } from '../../widget-core/d';\nimport * as diff from 'diff';\nimport WeakMap from '../../shim/WeakMap';\nimport Set from '../../shim/Set';\nimport Map from '../../shim/Map';\nimport { from as arrayFrom } from '../../shim/array';\n\nlet widgetClassCounter = 0;\nconst widgetMap = new WeakMap<Constructor<DefaultWidgetBaseInterface>, number>();\n\nfunction replacer(key: string, value: any): any {\n\tif (typeof value === 'function') {\n\t\treturn 'function';\n\t} else if (typeof value === 'undefined') {\n\t\treturn 'undefined';\n\t} else if (value instanceof Set || value instanceof Map) {\n\t\treturn arrayFrom(value);\n\t}\n\treturn value;\n}\n\nexport function formatDNodes(nodes: DNode | DNode[], depth: number = 0): string {\n\tconst isArrayFragment = Array.isArray(nodes) && depth === 0;\n\tlet initial = isArrayFragment ? '[\\n' : '';\n\tlet tabs = '';\n\tdepth = isArrayFragment ? 1 : depth;\n\tnodes = Array.isArray(nodes) ? nodes : [nodes];\n\n\tfor (let i = 0; i < depth; i++) {\n\t\ttabs = `${tabs}\\t`;\n\t}\n\tlet formattedNode = nodes.reduce((result: string, node, index) => {\n\t\tif (node === null || node === undefined) {\n\t\t\treturn result;\n\t\t}\n\t\tif (index > 0) {\n\t\t\tresult = `${result}\\n`;\n\t\t}\n\t\tresult = `${result}${tabs}`;\n\n\t\tif (typeof node === 'string') {\n\t\t\treturn `${result}\"${node}\"`;\n\t\t}\n\n\t\tresult = `${result}${formatNode(node, tabs)}`;\n\t\tif (node.children && node.children.length > 0) {\n\t\t\tresult = `${result}, [\\n${formatDNodes(node.children, depth + 1)}\\n${tabs}]`;\n\t\t}\n\t\treturn `${result})`;\n\t}, initial);\n\n\treturn isArrayFragment ? (formattedNode = `${formattedNode}\\n]`) : formattedNode;\n}\n\nfunction formatProperties(properties: any, tabs: string): string {\n\tproperties = Object.keys(properties)\n\t\t.sort()\n\t\t.reduce((props: any, key) => {\n\t\t\tprops[key] = properties[key];\n\t\t\treturn props;\n\t\t}, {});\n\tproperties = JSON.stringify(properties, replacer, `${tabs}\\t`).slice(0, -1);\n\treturn `${properties}${tabs}}`;\n}\n\nfunction getWidgetName(widgetConstructor: any): string {\n\tlet name: string;\n\tif (typeof widgetConstructor === 'string' || typeof widgetConstructor === 'symbol') {\n\t\tname = widgetConstructor.toString();\n\t} else {\n\t\tname = widgetConstructor.name;\n\t\tif (name === undefined) {\n\t\t\tlet id = widgetMap.get(widgetConstructor);\n\t\t\tif (id === undefined) {\n\t\t\t\tid = ++widgetClassCounter;\n\t\t\t\twidgetMap.set(widgetConstructor, id);\n\t\t\t}\n\t\t\tname = `Widget-${id}`;\n\t\t}\n\t}\n\treturn name;\n}\n\nfunction formatNode(node: WNode | VNode, tabs: any): string {\n\tconst propertyKeyCount = Object.keys(node.properties).length;\n\tlet properties = propertyKeyCount > 0 ? formatProperties(node.properties, tabs) : '{}';\n\tif (isWNode(node)) {\n\t\treturn `w(${getWidgetName(node.widgetConstructor)}, ${properties}`;\n\t}\n\treturn `v(\"${node.tag}\", ${properties}`;\n}\n\nexport function assertRender(actual: DNode | DNode[], expected: DNode | DNode[], message?: string): void {\n\tconst parsedActual = formatDNodes(actual);\n\tconst parsedExpected = formatDNodes(expected);\n\tconst diffResult = diff.diffLines(parsedActual, parsedExpected);\n\tlet diffFound = false;\n\tconst parsedDiff = diffResult.reduce((result: string, part, index) => {\n\t\tif (part.added) {\n\t\t\tdiffFound = true;\n\t\t\tresult = `${result}(E)${part.value.replace(/\\n\\t/g, '\\n(E)\\t')}`;\n\t\t} else if (part.removed) {\n\t\t\tdiffFound = true;\n\t\t\tresult = `${result}(A)${part.value.replace(/\\n\\t/g, '\\n(A)\\t')}`;\n\t\t} else {\n\t\t\tresult = `${result}${part.value}`;\n\t\t}\n\t\treturn result;\n\t}, '\\n');\n\n\tif (diffFound) {\n\t\tthrow new Error(parsedDiff);\n\t}\n}\n\nexport default assertRender;\n"]}