{"version":3,"file":"selector.js","sourceRoot":"","sources":["selector.ts"],"names":[],"mappings":"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","sourcesContent":["import { DNode, DefaultWidgetBaseInterface, WNode, VNode } from '../../widget-core/interfaces';\nimport { isVNode, isWNode } from '../../widget-core/d';\nimport * as cssSelect from 'css-select-umd';\n\nexport type TestFunction = (elem: DNode<DefaultWidgetBaseInterface>) => boolean;\n\nexport const parseSelector = (selector: string) => {\n\tconst selectors = selector.split(' ');\n\treturn selectors\n\t\t.map((selector) => {\n\t\t\tconst keySigilIndex = selector.indexOf('@');\n\t\t\tif (keySigilIndex === 0) {\n\t\t\t\treturn `[key=\"${selector.substr(1)}\"]`;\n\t\t\t} else if (keySigilIndex > 0) {\n\t\t\t\tconst key = selector.substring(keySigilIndex + 1);\n\t\t\t\treturn `${selector.slice(0, keySigilIndex)}[key=\"${key}\"]`;\n\t\t\t}\n\t\t\treturn selector;\n\t\t})\n\t\t.join(' ');\n};\n\nexport const adapter: any = {\n\tisTag(elem: DNode) {\n\t\treturn isVNode(elem);\n\t},\n\tgetText(elem: DNode[]) {\n\t\treturn '';\n\t},\n\tremoveSubsets(elements: DNode[]) {\n\t\treturn elements;\n\t},\n\tgetChildren(elem: DNode) {\n\t\treturn isVNode(elem) || isWNode(elem) ? elem.children : [];\n\t},\n\tgetAttributeValue(elem: DNode, name: string) {\n\t\tif (isVNode(elem) || isWNode(elem)) {\n\t\t\tif (name === 'class') {\n\t\t\t\tconst classes = (elem.properties as any).classes;\n\t\t\t\tif (Array.isArray(classes)) {\n\t\t\t\t\treturn classes.join(' ');\n\t\t\t\t}\n\t\t\t\treturn classes;\n\t\t\t}\n\t\t\treturn (elem.properties as any)[name];\n\t\t}\n\t},\n\thasAttrib(elem: DNode, name: string) {\n\t\tif (isVNode(elem) || isWNode(elem)) {\n\t\t\treturn name in elem.properties;\n\t\t}\n\t\treturn false;\n\t},\n\texistsOne(test: TestFunction, elements: DNode[]) {\n\t\treturn elements.some((elem: DNode) => test(elem));\n\t},\n\tgetName(elem: DNode) {\n\t\tif (isVNode(elem)) {\n\t\t\treturn elem.tag;\n\t\t}\n\t},\n\tgetParent(elem: DNode) {\n\t\tif (isVNode(elem) || isWNode(elem)) {\n\t\t\treturn (elem as any).parent;\n\t\t}\n\t},\n\tgetSiblings(elem: DNode) {\n\t\tif (isVNode(elem) || isWNode(elem)) {\n\t\t\tif ((elem as any).parent) {\n\t\t\t\treturn (elem as any).parent.children;\n\t\t\t}\n\t\t\treturn [elem];\n\t\t}\n\t},\n\tfindOne(test: TestFunction, arr: DNode[]): DNode {\n\t\tlet elem = null;\n\t\tfor (let i = 0, l = arr.length; i < l && !elem; i++) {\n\t\t\tif (test(arr[i])) {\n\t\t\t\telem = arr[i];\n\t\t\t} else {\n\t\t\t\tconst children = adapter.getChildren(arr[i]);\n\t\t\t\tif (children && children.length > 0) {\n\t\t\t\t\telem = adapter.findOne(test, children);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn elem;\n\t},\n\tfindAll(test: TestFunction, elements: DNode[]): DNode[] {\n\t\tlet result: DNode[] = [];\n\t\tfor (let i = 0, j = elements.length; i < j; i++) {\n\t\t\tif (test(elements[i])) {\n\t\t\t\tresult.push(elements[i]);\n\t\t\t}\n\t\t\tconst children = adapter.getChildren(elements[i]);\n\t\t\tif (children) {\n\t\t\t\tresult = [...result, ...adapter.findAll(test, children)];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n};\n\nexport function select(selector: string, nodes: DNode | DNode[]): (WNode | VNode)[] {\n\tnodes = Array.isArray(nodes) ? nodes : [nodes];\n\tselector = parseSelector(selector);\n\treturn cssSelect(selector, nodes, { adapter }) as (WNode | VNode)[];\n}\n\nexport default select;\n"]}