{"version":3,"file":"i18n.js","sourceRoot":"","sources":["../../../../src/i18n/i18n.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:interface-name */\nimport global from '../shim/global';\nimport Map from '../shim/Map';\nimport Evented from '../core/Evented';\nimport has from '../core/has';\nimport uuid from '../core/uuid';\nimport { Handle } from '../core/interfaces';\nimport { useDefault } from '../core/load/util';\nimport * as Globalize from 'globalize/dist/globalize/message';\nimport { isLoaded } from './cldr/load';\nimport { generateLocales, normalizeLocale } from './util/main';\n\n/**\n * A default bundle used as basis for loading locale-specific bundles.\n */\nexport interface Bundle<T extends Messages> {\n\t/**\n\t * A unique identifier for the bundle that will be generated automatically when it is registered.\n\t */\n\treadonly id?: string;\n\n\t/**\n\t * A list of supported locales. Any included locale MUST have an associated bundle.\n\t */\n\treadonly locales?: LocaleLoaders<T>;\n\n\t/**\n\t * The map of default messages that will be used when locale-specific messages are unavailable.\n\t * Note that any message key used in the i18n system MUST have a default specified here.\n\t */\n\treadonly messages: T;\n}\n\n/**\n * Options object passed to message formatters and used for token replacement.\n */\nexport interface FormatOptions {\n\t[key: string]: any;\n}\n\nexport interface I18n<T extends Messages> {\n\t(bundle: Bundle<T>, locale?: string): Promise<T>;\n\n\t/**\n\t * The current namespace as set via `switchLocale`. Defaults to `systemLocale`.\n\t */\n\treadonly locale: string;\n}\n\n/**\n * A map of locales to functions responsible for loading their respective translations.\n */\nexport interface LocaleLoaders<T extends Messages> {\n\t[locale: string]: () => LocaleTranslations<T> | Promise<LocaleTranslations<T>>;\n}\n\n/**\n * An object of locale-specific translations.\n */\nexport type LocaleTranslations<T extends Messages> = Partial<T> | { default?: Partial<T> };\n\n/**\n * Describes a compiled ICU message formatter function.\n */\nexport interface MessageFormatter {\n\t(options?: FormatOptions): string;\n}\n\n/**\n * An object of keys to locale messages.\n */\nexport interface Messages {\n\t[key: string]: string;\n}\n\nconst TOKEN_PATTERN = /\\{([a-z0-9_]+)\\}/gi;\nconst bundleMap = new Map<string, Map<string, Messages>>();\nconst formatterMap = new Map<string, MessageFormatter>();\nconst localeProducer = new Evented();\nlet rootLocale: string;\n\n/**\n * Return the bundle's unique identifier, creating one if it does not already exist.\n *\n * @param bundle A message bundle\n * @return The bundle's unique identifier\n */\nfunction getBundleId<T extends Messages>(bundle: Bundle<T>): string {\n\tif (bundle.id) {\n\t\treturn bundle.id;\n\t}\n\n\tconst id = uuid();\n\tObject.defineProperty(bundle, 'id', {\n\t\tvalue: id\n\t});\n\treturn id;\n}\n\n/**\n * @private\n * Return a function that formats an ICU-style message, and takes an optional value for token replacement.\n *\n * Usage:\n * const formatter = getMessageFormatter(bundle, 'guestInfo', 'fr');\n * const message = formatter({\n *   host: 'Miles',\n *   gender: 'male',\n *   guest: 'Oscar',\n *   guestCount: '15'\n * });\n *\n * @param id\n * The message's bundle id.\n *\n * @param key\n * The message's key.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The message formatter.\n */\nfunction getIcuMessageFormatter(id: string, key: string, locale?: string): MessageFormatter {\n\tlocale = normalizeLocale(locale || getRootLocale());\n\tconst formatterKey = `${locale}:${id}:${key}`;\n\tlet formatter = formatterMap.get(formatterKey);\n\n\tif (formatter) {\n\t\treturn formatter;\n\t}\n\n\tconst globalize = locale !== getRootLocale() ? new Globalize(normalizeLocale(locale)) : Globalize;\n\tformatter = globalize.messageFormatter(`${id}/${key}`);\n\n\tconst cached = bundleMap.get(id);\n\tif (cached && cached.get(locale)) {\n\t\tformatterMap.set(formatterKey, formatter);\n\t}\n\n\treturn formatter;\n}\n\n/**\n * @private\n * Load the specified locale-specific bundles, mapping the default exports to simple `Messages` objects.\n */\nfunction loadLocaleBundles<T extends Messages>(locales: LocaleLoaders<T>, supported: string[]): Promise<T[]> {\n\treturn Promise.all(supported.map((locale) => locales[locale]())).then((bundles) => {\n\t\treturn bundles.map((bundle) => useDefault(bundle));\n\t});\n}\n\n/**\n * @private\n * Return the root locale. Defaults to the system locale.\n */\nfunction getRootLocale(): string {\n\treturn rootLocale || systemLocale;\n}\n\n/**\n * @private\n * Retrieve a list of supported locales that can provide messages for the specified locale.\n *\n * @param locale\n * The target locale.\n *\n * @param supported\n * The locales that are supported by the bundle.\n *\n * @return\n * A list of supported locales that match the target locale.\n */\nfunction getSupportedLocales(locale: string, supported: string[] = []): string[] {\n\treturn generateLocales(locale).filter((locale: string) => supported.indexOf(locale) > -1);\n}\n\n/**\n * @private\n * Inject messages for the specified locale into the i18n system.\n *\n * @param id\n * The bundle's unique identifier\n *\n * @param messages\n * The messages to inject\n *\n * @param locale\n * An optional locale. If not specified, then it is assumed that the messages are the defaults for the given\n * bundle path.\n */\nfunction loadMessages<T extends Messages>(id: string, messages: T, locale: string = 'root') {\n\tlet cached = bundleMap.get(id);\n\n\tif (!cached) {\n\t\tcached = new Map<string, Messages>();\n\t\tbundleMap.set(id, cached);\n\t}\n\n\tcached.set(locale, messages);\n\tGlobalize.loadMessages({\n\t\t[locale]: {\n\t\t\t[id]: messages\n\t\t}\n\t});\n}\n\n/**\n * Return a formatted message.\n *\n * If both the \"supplemental/likelySubtags\" and \"supplemental/plurals-type-cardinal\" CLDR data have been loaded, then\n * the ICU message format is supported. Otherwise, a simple token-replacement mechanism is used.\n *\n * Usage:\n * formatMessage(bundle, 'guestInfo', {\n *   host: 'Bill',\n *   guest: 'John'\n * }, 'fr');\n *\n * @param bundle\n * The bundle containing the target message.\n *\n * @param key\n * The message's key.\n *\n * @param options\n * An optional value used by the formatter to replace tokens with values.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The formatted message.\n */\nexport function formatMessage<T extends Messages>(\n\tbundle: Bundle<T>,\n\tkey: string,\n\toptions?: FormatOptions,\n\tlocale?: string\n): string {\n\treturn getMessageFormatter(bundle, key, locale)(options);\n}\n\n/**\n * Return the cached messages for the specified bundle and locale. If messages have not been previously loaded for the\n * specified locale, no value will be returned.\n *\n * @param bundle\n * The default bundle that is used to determine where the locale-specific bundles are located.\n *\n * @param locale\n * The locale of the desired messages.\n *\n * @return The cached messages object, if it exists.\n */\nexport function getCachedMessages<T extends Messages>(bundle: Bundle<T>, locale: string): T | void {\n\tconst { id = getBundleId(bundle), locales, messages } = bundle;\n\tconst cached = bundleMap.get(id);\n\n\tif (!cached) {\n\t\tloadMessages(id, messages);\n\t} else {\n\t\tconst localeMessages = cached.get(locale);\n\t\tif (localeMessages) {\n\t\t\treturn localeMessages as T;\n\t\t}\n\t}\n\n\tconst supportedLocales = getSupportedLocales(locale, locales && Object.keys(locales));\n\tif (!supportedLocales.length) {\n\t\treturn messages;\n\t}\n\n\tif (cached) {\n\t\treturn cached.get(supportedLocales[supportedLocales.length - 1]) as T;\n\t}\n}\n\n/**\n * Return a function that formats a specific message, and takes an optional value for token replacement.\n *\n * If both the \"supplemental/likelySubtags\" and \"supplemental/plurals-type-cardinal\" CLDR data have been loaded, then\n * the returned function will have ICU message format support. Otherwise, the returned function will perform a simple\n * token replacement on the message string.\n *\n * Usage:\n * const formatter = getMessageFormatter(bundle, 'guestInfo', 'fr');\n * const message = formatter({\n *   host: 'Miles',\n *   gender: 'male',\n *   guest: 'Oscar',\n *   guestCount: '15'\n * });\n *\n * @param bundle\n * The bundle containing the target message.\n *\n * @param key\n * The message's key.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The message formatter.\n */\nexport function getMessageFormatter<T extends Messages>(\n\tbundle: Bundle<T>,\n\tkey: string,\n\tlocale?: string\n): MessageFormatter {\n\tconst { id = getBundleId(bundle) } = bundle;\n\n\tif (isLoaded('supplemental', 'likelySubtags') && isLoaded('supplemental', 'plurals-type-cardinal')) {\n\t\treturn getIcuMessageFormatter(id, key, locale);\n\t}\n\n\tconst cached = bundleMap.get(id);\n\tconst messages = cached ? cached.get(locale || getRootLocale()) || cached.get('root') : null;\n\n\tif (!messages) {\n\t\tthrow new Error(`The bundle has not been registered.`);\n\t}\n\n\treturn function(options: FormatOptions = Object.create(null)) {\n\t\treturn messages[key].replace(TOKEN_PATTERN, (token: string, property: string) => {\n\t\t\tconst value = options[property];\n\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tthrow new Error(`Missing property ${property}`);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t});\n\t};\n}\n\n/**\n * Load locale-specific messages for the specified bundle and locale.\n *\n * @param bundle\n * The default bundle that is used to determine where the locale-specific bundles are located.\n *\n * @param locale\n * An optional locale. If no locale is provided, then the current locale is assumed.\n *\n * @return A promise to the locale-specific messages.\n */\nasync function i18n<T extends Messages>(bundle: Bundle<T>, locale?: string): Promise<T> {\n\tconst currentLocale = locale ? normalizeLocale(locale) : getRootLocale();\n\tconst cachedMessages = getCachedMessages(bundle, currentLocale);\n\n\tif (cachedMessages) {\n\t\treturn cachedMessages;\n\t}\n\n\tconst locales = bundle.locales as LocaleLoaders<T>;\n\tconst supportedLocales = getSupportedLocales(currentLocale, Object.keys(locales));\n\tconst bundles = await loadLocaleBundles<T>(locales, supportedLocales);\n\treturn bundles.reduce((previous: any, partial: any): T => {\n\t\tconst localeMessages: T = { ...previous, ...partial };\n\t\tloadMessages(getBundleId(bundle), <T>Object.freeze(localeMessages), currentLocale);\n\t\treturn localeMessages;\n\t}, bundle.messages);\n}\n\nObject.defineProperty(i18n, 'locale', {\n\tget: getRootLocale\n});\n\nexport default i18n as I18n<Messages>;\n\n/**\n * Invalidate the cache for a particular bundle, or invalidate the entire cache. Note that cached messages for all\n * locales for a given bundle will be cleared.\n *\n * @param bundle\n * An optional bundle to invalidate. If no bundle is provided, then the cache is cleared for all bundles.\n */\nexport function invalidate<T extends Messages>(bundle?: Bundle<T>) {\n\tif (bundle) {\n\t\tbundle.id && bundleMap.delete(bundle.id);\n\t} else {\n\t\tbundleMap.clear();\n\t}\n}\n\n/**\n * Register an observer to be notified when the root locale changes.\n *\n * @param callback\n * A callback function which will receive the updated locale string on updates.\n *\n * @return\n * A handle object that can be used to unsubscribe from updates.\n */\nexport const observeLocale = function(callback: (locale: string) => {}): Handle {\n\treturn localeProducer.on('change', (event: any) => {\n\t\tcallback(event.target);\n\t});\n};\n\n/**\n * Pre-load locale-specific messages into the i18n system.\n *\n * @param bundle\n * The default bundle that is used to merge locale-specific messages with the default messages.\n *\n * @param messages\n * The messages to cache.\n *\n * @param locale\n * The locale for the messages\n */\nexport function setLocaleMessages<T extends Messages>(\n\tbundle: Bundle<T>,\n\tlocaleMessages: Partial<T>,\n\tlocale: string\n): void {\n\tconst messages: T = { ...(bundle.messages as any), ...(localeMessages as any) };\n\tloadMessages(getBundleId(bundle), <T>Object.freeze(messages), locale);\n}\n\n/**\n * Change the root locale, and notify any registered observers.\n *\n * @param locale\n * The new locale.\n */\nexport function switchLocale(locale: string): void {\n\tconst previous = rootLocale;\n\trootLocale = locale ? normalizeLocale(locale) : '';\n\n\tif (previous !== rootLocale) {\n\t\tif (isLoaded('supplemental', 'likelySubtags')) {\n\t\t\tGlobalize.load({\n\t\t\t\tmain: {\n\t\t\t\t\t[rootLocale]: {}\n\t\t\t\t}\n\t\t\t});\n\t\t\tGlobalize.locale(rootLocale);\n\t\t}\n\n\t\tlocaleProducer.emit({ type: 'change', target: rootLocale });\n\t}\n}\n\n/**\n * The default environment locale.\n *\n * It should be noted that while the system locale will be normalized to a single\n * format when loading message bundles, this value represents the unaltered\n * locale returned directly by the environment.\n */\nexport const systemLocale: string = (function() {\n\tlet systemLocale = 'en';\n\tif (has('host-browser')) {\n\t\tconst navigator = global.navigator;\n\t\tsystemLocale = navigator.language || navigator.userLanguage;\n\t} else if (has('host-node')) {\n\t\tsystemLocale = process.env.LANG || systemLocale;\n\t}\n\treturn normalizeLocale(systemLocale);\n})();\n"]}