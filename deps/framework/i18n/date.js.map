{"version":3,"file":"date.js","sourceRoot":"","sources":["../../../../src/i18n/date.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,oCAAkC;IAClC,2CAAyC;IACzC,yCAAuC;IACvC,kDAAgD;IAEhD,8CAAsD;IAmEtD,oBAA2B,KAAW,EAAE,eAA+C,EAAE,MAAe;QACvG,MAAM,CAAC,8BAAkB,CAAqC,YAAY,EAAE;YAC3E,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,KAAK,OAAA;SACL,CAAC,CAAC;IACJ,CAAC;IAND,gCAMC;IA0BD,4BACC,KAAa,EACb,IAAY,EACZ,eAAuD,EACvD,MAAe;QAEf,MAAM,CAAC,8BAAkB,CAA+C,oBAAoB,EAAE;YAC7F,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,IAAI,MAAA;YACJ,KAAK,OAAA;SACL,CAAC,CAAC;IACJ,CAAC;IAZD,gDAYC;IAiBD,0BAAiC,eAA+C,EAAE,MAAe;QAChG,MAAM,CAAC,8BAAkB,CAAsC,eAAe,EAAE;YAC/E,MAAM,QAAA;YACN,eAAe,iBAAA;SACf,CAAC,CAAC;IACJ,CAAC;IALD,4CAKC;IAgBD,uBAA8B,eAA+C,EAAE,MAAe;QAC7F,MAAM,CAAC,8BAAkB,CAAmC,YAAY,EAAE;YACzE,MAAM,QAAA;YACN,eAAe,iBAAA;SACf,CAAC,CAAC;IACJ,CAAC;IALD,sCAKC;IAyBD,kCACC,IAAY,EACZ,eAAuD,EACvD,MAAe;QAEf,MAAM,CAAC,8BAAkB,CAAwD,uBAAuB,EAAE;YACzG,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,IAAI,MAAA;SACJ,CAAC,CAAC;IACJ,CAAC;IAVD,4DAUC;IAmBD,mBAA0B,KAAa,EAAE,eAA+C,EAAE,MAAe;QACxG,MAAM,CAAC,8BAAkB,CAAqC,WAAW,EAAE;YAC1E,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,KAAK,OAAA;SACL,CAAC,CAAC;IACJ,CAAC;IAND,8BAMC","sourcesContent":["import 'globalize/dist/globalize';\nimport 'globalize/dist/globalize/number';\nimport 'globalize/dist/globalize/date';\nimport 'globalize/dist/globalize/relative-time';\nimport { NumberFormatter } from './number';\nimport { globalizeDelegator } from './util/globalize';\n\nexport type DateLength = 'short' | 'medium' | 'long' | 'full';\nexport type RelativeTimeLength = 'short' | 'narrow';\n\nexport interface DateFormatter {\n\t/**\n\t * Any function that converts a date object into a string.\n\t */\n\t(value: Date): string;\n}\n\nexport type DateFormatterOptions = {\n\t/**\n\t * String value indicating a skeleton, eg. { skeleton: \"GyMMMd\" }.\n\t * Skeleton provides a more flexible formatting mechanism than the predefined list full, long, medium, or short represented by date, time, or datetime.\n\t * Instead, they are an open-ended list of patterns containing only date field information, and in a canonical order.\n\t */\n\tskeleton?: string;\n\n\t/**\n\t * One of the following String values: full, long, medium, or short, eg. { date: \"full\" }.\n\t */\n\tdate?: DateLength;\n\n\t/**\n\t * One of the following String values: full, long, medium, or short, eg. { time: \"full\" }.\n\t */\n\ttime?: DateLength;\n\n\t/**\n\t * One of the following String values: full, long, medium, or short, eg. { datetime: \"full\" }\n\t */\n\tdatetime?: DateLength;\n};\n\nexport interface DateParser {\n\t/**\n\t * Any function that parses a Date object from a string.\n\t */\n\t(value: string): Date;\n}\n\nexport type RelativeTimeFormatterOptions = {\n\t/**\n\t * eg. \"short\" or \"narrow\". Or falsy for default long form\n\t */\n\tform?: RelativeTimeLength;\n};\n\n/**\n * Format a date according to the specified options for the specified or current locale.\n *\n * @param value\n * The date to format.\n *\n * @param options\n * An optional object of formatting options.\n *\n * @param locale\n * An optional locale. Defaults to the root locale.\n *\n * @return\n * The formatted date string.\n */\nexport function formatDate(value: Date, options?: DateFormatterOptions, locale?: string): string;\nexport function formatDate(value: Date, locale?: string): string;\nexport function formatDate(value: Date, optionsOrLocale?: DateFormatterOptions | string, locale?: string): string {\n\treturn globalizeDelegator<Date, DateFormatterOptions, string>('formatDate', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tvalue\n\t});\n}\n\n/**\n * Format a number as a unit of relative time for the specified unit and optional locale.\n * E.g., `formatRelativeTime(1, 'week', { form: 'short' }, 'fr'` (\"la semaine prochaine\")\n *\n * @param value\n * The relative unit number. Positive numbers indicate future events (e.g., \"in 2 days\") while negative numbers\n * represent past events (e.g., \"1 day ago\").\n *\n * @param unit\n * E.g., \"week\", \"day\", \"month\", etc.\n *\n * @param options\n * An optional object of formatting options.\n *\n * @param locale\n * An optional locale. Defaults to the current locale.\n */\nexport function formatRelativeTime(\n\tvalue: number,\n\tunit: string,\n\toptions?: RelativeTimeFormatterOptions,\n\tlocale?: string\n): string;\nexport function formatRelativeTime(value: number, unit: string, locale?: string): string;\nexport function formatRelativeTime(\n\tvalue: number,\n\tunit: string,\n\toptionsOrLocale?: RelativeTimeFormatterOptions | string,\n\tlocale?: string\n): string {\n\treturn globalizeDelegator<number, RelativeTimeFormatterOptions, string>('formatRelativeTime', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tunit,\n\t\tvalue\n\t});\n}\n\n/**\n * Return a date formatter that accepts a date and formats it according to the specified options for the\n * specified or current locale.\n *\n * @param options\n * An optional object of formatting options.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * A function that accepts a date and returns a formatted date string.\n */\nexport function getDateFormatter(options?: DateFormatterOptions, locale?: string): DateFormatter;\nexport function getDateFormatter(locale?: string): DateFormatter;\nexport function getDateFormatter(optionsOrLocale?: DateFormatterOptions | string, locale?: string): DateFormatter {\n\treturn globalizeDelegator<DateFormatterOptions, DateFormatter>('dateFormatter', {\n\t\tlocale,\n\t\toptionsOrLocale\n\t});\n}\n\n/**\n * Return a function that parses a string into a date object, according any optional settings or locale.\n *\n * @param options\n * An optional config that describes the format of the string.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * A function that accepts a string and returns a date object.\n */\nexport function getDateParser(options?: DateFormatterOptions, locale?: string): DateParser;\nexport function getDateParser(locale?: string): DateParser;\nexport function getDateParser(optionsOrLocale?: DateFormatterOptions | string, locale?: string): DateParser {\n\treturn globalizeDelegator<DateFormatterOptions, DateParser>('dateParser', {\n\t\tlocale,\n\t\toptionsOrLocale\n\t});\n}\n\n/**\n * Format a number as a unit of relative time for the specified unit and optional locale.\n * E.g., `formatRelativeTime(1, 'week', { form: 'short' }, 'fr'` (\"la semaine prochaine\")\n *\n * @param unit\n * E.g., \"week\", \"day\", \"month\", etc.\n *\n * @param options\n * An optional object of formatting options.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * A function that accepts a relative time number and returns a formatted string. Positive numbers indicate future\n * events (e.g., \"in 2 days\") while negative numbers represent past events (e.g., \"1 day ago\").\n */\nexport function getRelativeTimeFormatter(\n\tunit: string,\n\toptions?: RelativeTimeFormatterOptions,\n\tlocale?: string\n): NumberFormatter;\nexport function getRelativeTimeFormatter(unit: string, locale?: string): NumberFormatter;\nexport function getRelativeTimeFormatter(\n\tunit: string,\n\toptionsOrLocale?: RelativeTimeFormatterOptions | string,\n\tlocale?: string\n): NumberFormatter {\n\treturn globalizeDelegator<string, RelativeTimeFormatterOptions, NumberFormatter>('relativeTimeFormatter', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tunit\n\t});\n}\n\n/**\n * Convert a string into a date object, according any optional settings or locale.\n *\n * @param value\n * The date string to convert.\n *\n * @param options\n * An optional config that describes the format of the string.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * The formatted date.\n */\nexport function parseDate(value: string, options?: DateFormatterOptions, locale?: string): Date;\nexport function parseDate(value: string, locale?: string): Date;\nexport function parseDate(value: string, optionsOrLocale?: DateFormatterOptions | string, locale?: string): Date {\n\treturn globalizeDelegator<string, DateFormatterOptions, Date>('parseDate', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tvalue\n\t});\n}\n"]}