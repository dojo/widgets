{"version":3,"file":"stringExtras.js","sourceRoot":"","sources":["stringExtras.ts"],"names":[],"mappings":";;;;;;;;;;;IAEA,IAAM,mBAAmB,GAAG,uBAAuB,CAAC;IACpD,IAAM,gBAAgB,GAAG,OAAO,CAAC;IACjC,IAAM,mBAAmB,GAAG,UAAU,CAAC;IACvC,IAAM,YAAY,GAAiB;QAClC,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,QAAQ;QACb,GAAG,EAAE,OAAO;KACZ,CAAC;IAEF;;;;OAIG;IACH,sBAA6B,IAAY;QACxC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAFD,oCAEC;IAED;;;;;OAKG;IACH,mBAA0B,GAAW,EAAE,YAA4B;QAA5B,6BAAA,EAAA,mBAA4B;QAClE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC;QAED,IAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,CAAC;QAEtE,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,SAAiB;YACrD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACJ,CAAC;IAVD,8BAUC","sourcesContent":["import { Hash } from './interfaces';\n\nconst escapeRegExpPattern = /[[\\]{}()|\\/\\\\^$.*+?]/g;\nconst escapeXmlPattern = /[&<]/g;\nconst escapeXmlForPattern = /[&<>'\"]/g;\nconst escapeXmlMap: Hash<string> = {\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n\t'\"': '&quot;',\n\t\"'\": '&#39;'\n};\n\n/**\n * Escapes a string so that it can safely be passed to the RegExp constructor.\n * @param text The string to be escaped\n * @return The escaped string\n */\nexport function escapeRegExp(text: string): string {\n\treturn !text ? text : text.replace(escapeRegExpPattern, '\\\\$&');\n}\n\n/**\n * Sanitizes a string to protect against tag injection.\n * @param xml The string to be escaped\n * @param forAttribute Whether to also escape ', \", and > in addition to < and &\n * @return The escaped string\n */\nexport function escapeXml(xml: string, forAttribute: boolean = true): string {\n\tif (!xml) {\n\t\treturn xml;\n\t}\n\n\tconst pattern = forAttribute ? escapeXmlForPattern : escapeXmlPattern;\n\n\treturn xml.replace(pattern, function(character: string): string {\n\t\treturn escapeXmlMap[character];\n\t});\n}\n"]}