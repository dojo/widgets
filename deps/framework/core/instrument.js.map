{"version":3,"file":"instrument.js","sourceRoot":"","sources":["instrument.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,6BAAwB;IAExB;;OAEG;IACH,IAAM,0BAA0B,GAAG,mDAAmD,CAAC;IAEvF;;OAEG;IACH,IAAI,UAA2E,CAAC;IAwBhF;;;;OAIG;IACH,oBAA2B,EAAoD;YAApD,4BAAoD,EAAlD,oBAAO,EAAE,cAAI,EAAE,cAAI,EAAE,YAAG;QACpD,+DAA+D;QAC/D,EAAE,CAAC,CAAC,aAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,OAAO,IAAI,0BAA0B,CAAC;YAChD,IAAI,OAAO,GAAG,kBAAe,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAG,OAAS,CAAC;YACjE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACT,OAAO,IAAI,iBAAe,GAAG,2BAAwB,CAAC;YACvD,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,OAAO,CAAC,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvB,UAAU,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC;QACF,CAAC;IACF,CAAC;IAhBD,gCAgBC;IAED;;;;OAIG;IACH,0BAAiC,OAA2B;QAC3D,MAAM,CAAC;YAAS,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAC7B,UAAU,CAAC,OAAO,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC,CAAC;IACH,CAAC;IALD,4CAKC;IAED;;;;OAIG;IACH,6BAAoC,OAA2B;QAC9D,MAAM,CAAC,UAAS,MAAW,EAAE,WAA4B,EAAE,UAA8B;YACxF,EAAE,CAAC,CAAC,aAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACV,IAAA,+BAAiB,CAAgB;gBACzC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;gBACxB,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;gBAClC,wDAAwD;gBACxD,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAI,MAAM,CAAC,WAAW,CAAC,IAAI,SAAI,WAAa,CAAC,CAAC,CAAC,WAAW,CAAC;gBACnG,UAAU,CAAC,KAAK,GAAG;oBAAS,cAAc;yBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;wBAAd,yBAAc;;oBACzC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACpB,MAAM,CAAC,YAAU,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACvC,CAAC,CAAC;YACH,CAAC;YACD,MAAM,CAAC,UAAU,CAAC;QACnB,CAAC,CAAC;IACH,CAAC;IAfD,kDAeC;IAED;;;;;OAKG;IACH,iBAAwB,IAA0D;QACjF,UAAU,GAAG,IAAI,CAAC;IACnB,CAAC;IAFD,0BAEC","sourcesContent":["import has from './has';\n\n/**\n * The default message to warn when no other is provided\n */\nconst DEFAULT_DEPRECATED_MESSAGE = 'This function will be removed in future versions.';\n\n/**\n * When set, globalWarn will be used instead of `console.warn`\n */\nlet globalWarn: ((message?: any, ...optionalParams: any[]) => void) | undefined;\n\nexport interface DeprecatedOptions {\n\t/**\n\t * The message to use when warning\n\t */\n\tmessage?: string;\n\n\t/**\n\t * The name of the method or function to use\n\t */\n\tname?: string;\n\n\t/**\n\t * An alternative function to log the warning to\n\t */\n\twarn?: (...args: any[]) => void;\n\n\t/**\n\t * Reference an URL for more information when warning\n\t */\n\turl?: string;\n}\n\n/**\n * A function that will console warn that a function has been deprecated\n *\n * @param options Provide options which change the display of the message\n */\nexport function deprecated({ message, name, warn, url }: DeprecatedOptions = {}): void {\n\t/* istanbul ignore else: testing with debug off is difficult */\n\tif (has('debug')) {\n\t\tmessage = message || DEFAULT_DEPRECATED_MESSAGE;\n\t\tlet warning = `DEPRECATED: ${name ? name + ': ' : ''}${message}`;\n\t\tif (url) {\n\t\t\twarning += `\\n\\n    See ${url} for more details.\\n\\n`;\n\t\t}\n\t\tif (warn) {\n\t\t\twarn(warning);\n\t\t} else if (globalWarn) {\n\t\t\tglobalWarn(warning);\n\t\t} else {\n\t\t\tconsole.warn(warning);\n\t\t}\n\t}\n}\n\n/**\n * A function that generates before advice that can be used to warn when an API has been deprecated\n *\n * @param options Provide options which change the display of the message\n */\nexport function deprecatedAdvice(options?: DeprecatedOptions): (...args: any[]) => any[] {\n\treturn function(...args: any[]): any[] {\n\t\tdeprecated(options);\n\t\treturn args;\n\t};\n}\n\n/**\n * A method decorator that will console warn when a method if invoked that is deprecated\n *\n * @param options Provide options which change the display of the message\n */\nexport function deprecatedDecorator(options?: DeprecatedOptions): MethodDecorator {\n\treturn function(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\n\t\tif (has('debug')) {\n\t\t\tconst { value: originalFn } = descriptor;\n\t\t\toptions = options || {};\n\t\t\tpropertyKey = String(propertyKey);\n\t\t\t/* IE 10/11 don't have the name property on functions */\n\t\t\toptions.name = target.constructor.name ? `${target.constructor.name}#${propertyKey}` : propertyKey;\n\t\t\tdescriptor.value = function(...args: any[]) {\n\t\t\t\tdeprecated(options);\n\t\t\t\treturn originalFn.apply(target, args);\n\t\t\t};\n\t\t}\n\t\treturn descriptor;\n\t};\n}\n\n/**\n * A function that will set the warn function that will be used instead of `console.warn` when\n * logging warning messages\n *\n * @param warn The function (or `undefined`) to use instead of `console.warn`\n */\nexport function setWarn(warn?: ((message?: any, ...optionalParams: any[]) => void)): void {\n\tglobalWarn = warn;\n}\n"]}