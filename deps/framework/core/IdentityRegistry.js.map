{"version":3,"file":"IdentityRegistry.js","sourceRoot":"","sources":["../../../../src/core/IdentityRegistry.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,mCAA8B;IAC9B,2CAAsC;IAGtC,0BAAwB;IACxB,+BAA0B;IAE1B,IAAM,IAAI,GAAG,cAAO,CAAC,CAAC;IAYtB,IAAM,eAAe,GAAG,IAAI,iBAAO,EAAqC,CAAC;IAEzE,kBAAoC,QAA6B;QAChE,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;IACvC,CAAC;IAOD;;OAEG;IACH;QACC;YACC,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE;gBACzB,QAAQ,EAAE,IAAI,aAAG,EAAsB;gBACvC,KAAK,EAAE,IAAI,iBAAO,EAAe;aACjC,CAAC,CAAC;QACJ,CAAC;QAED;;;;;;;WAOG;QACH,8BAAG,GAAH,UAAI,EAAY;YACf,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,IAAI,KAAK,CAAC,0CAAwC,EAAE,CAAC,QAAQ,EAAE,MAAG,CAAC,CAAC;YAC3E,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QACpB,CAAC;QAED;;;;WAIG;QACH,mCAAQ,GAAR,UAAS,KAAQ;YAChB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;QAED;;;;WAIG;QACH,iCAAM,GAAN,UAAO,EAAY;YAClB,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,KAAK,CAAC;YACd,CAAC;YAED,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAED;;;;WAIG;QACH,8BAAG,GAAH,UAAI,EAAY;YACf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC;QAED;;;;;;;WAOG;QACH,mCAAQ,GAAR,UAAS,KAAQ;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC5D,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;QAED;;;;;;;;;;WAUG;QACH,mCAAQ,GAAR,UAAS,EAAY,EAAE,KAAQ;YAA/B,iBA8BC;YA7BA,IAAM,QAAQ,GAAG,QAAQ,CAAI,IAAI,CAAC,CAAC,QAAQ,CAAC;YAC5C,IAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;gBACpD,IAAM,GAAG,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,iEAA+D,GAAG,MAAG,CAAC,CAAC;YACxF,CAAC;YAED,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACtE,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC;gBACrC,IAAM,GAAG,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;gBAClC,MAAM,IAAI,KAAK,CAAC,sEAAoE,GAAG,MAAG,CAAC,CAAC;YAC7F,CAAC;YAED,gFAAgF;YAChF,EAAE,CAAC,CAAC,aAAa,IAAI,UAAU,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAC7B,CAAC;YAED,IAAM,MAAM,GAAG;gBACd,OAAO,EAAE;oBACR,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;oBACtB,QAAQ,CAAC,KAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACpC,CAAC;aACD,CAAC;YAEF,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,QAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YACpC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAEpC,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;QAED,kCAAO,GAAP;YACC,IAAM,MAAM,GAAG,IAAI,cAAI,EAAiB,CAAC;YAEzC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAe,EAAE,GAAa;gBAC9D,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC;QAED,iCAAM,GAAN;YACC,IAAM,MAAM,GAAG,IAAI,cAAI,EAAK,CAAC;YAE7B,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAe,EAAE,GAAa;gBAC9D,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC;QAED,8BAAG,GAAH;YACC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACvC,CAAC;QAED,2BAAC,MAAM,CAAC,QAAQ,CAAC,GAAjB;YACC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC;QACF,uBAAC;IAAD,CAAC,AAhJD,IAgJC;IAhJY,4CAAgB;IAkJ7B,kBAAe,gBAAgB,CAAC","sourcesContent":["import Map from '../shim/Map';\nimport WeakMap from '../shim/WeakMap';\nimport { Iterable, IterableIterator } from '../shim/iterator';\nimport { Handle } from './interfaces';\nimport '../shim/Symbol';\nimport List from './List';\n\nconst noop = () => {};\n\ninterface Entry<V> {\n\treadonly handle: Handle;\n\treadonly value: V;\n}\n\ninterface State<V extends object> {\n\treadonly entryMap: Map<Identity, Entry<V>>;\n\treadonly idMap: WeakMap<V, Identity>;\n}\n\nconst privateStateMap = new WeakMap<IdentityRegistry<any>, State<any>>();\n\nfunction getState<V extends object>(instance: IdentityRegistry<V>): State<V> {\n\treturn privateStateMap.get(instance)!;\n}\n\n/**\n * Registry identities can be strings or symbols. Note that the empty string is allowed.\n */\nexport type Identity = string | symbol;\n\n/**\n * A registry of values, mapped by identities.\n */\nexport class IdentityRegistry<V extends object> implements Iterable<[Identity, V]> {\n\tconstructor() {\n\t\tprivateStateMap.set(this, {\n\t\t\tentryMap: new Map<Identity, Entry<V>>(),\n\t\t\tidMap: new WeakMap<V, Identity>()\n\t\t});\n\t}\n\n\t/**\n\t * Look up a value by its identifier.\n\t *\n\t * Throws if no value has been registered for the given identifier.\n\t *\n\t * @param id The identifier\n\t * @return The value\n\t */\n\tget(id: Identity): V {\n\t\tconst entry = getState(this).entryMap.get(id);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`Could not find a value for identity '${id.toString()}'`);\n\t\t}\n\n\t\treturn entry.value;\n\t}\n\n\t/**\n\t * Determine whether the value has been registered.\n\t * @param value The value\n\t * @return `true` if the value has been registered, `false` otherwise\n\t */\n\tcontains(value: V): boolean {\n\t\treturn getState(this).idMap.has(value);\n\t}\n\n\t/**\n\t * Remove from the registry the value for a given identifier.\n\t * @param id The identifier\n\t * @return `true` if the value was removed, `false` otherwise\n\t */\n\tdelete(id: Identity): boolean {\n\t\tconst entry = getState(this).entryMap.get(id);\n\t\tif (!entry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tentry.handle.destroy();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determine whether a value has been registered for the given identifier.\n\t * @param id The identifier\n\t * @return `true` if a value has been registered, `false` otherwise\n\t */\n\thas(id: Identity): boolean {\n\t\treturn getState(this).entryMap.has(id);\n\t}\n\n\t/**\n\t * Look up the identifier for which the given value has been registered.\n\t *\n\t * Throws if the value hasn't been registered.\n\t *\n\t * @param value The value\n\t * @return The identifier otherwise\n\t */\n\tidentify(value: V): Identity | undefined {\n\t\tif (!this.contains(value)) {\n\t\t\tthrow new Error('Could not identify non-registered value');\n\t\t}\n\n\t\treturn getState(this).idMap.get(value);\n\t}\n\n\t/**\n\t * Register a new value with a new identity.\n\t *\n\t * Throws if a different value has already been registered for the given identity,\n\t * or if the value has already been registered with a different identity.\n\t *\n\t * @param id The identifier\n\t * @param value The value\n\t * @return A handle for deregistering the value. Note that when called repeatedly with\n\t *   the same identifier and value combination, the same handle is returned\n\t */\n\tregister(id: Identity, value: V): Handle {\n\t\tconst entryMap = getState<V>(this).entryMap;\n\t\tconst existingEntry = entryMap.get(id);\n\t\tif (existingEntry && existingEntry.value !== value) {\n\t\t\tconst str = id.toString();\n\t\t\tthrow new Error(`A value has already been registered for the given identity (${str})`);\n\t\t}\n\n\t\tconst existingId = this.contains(value) ? this.identify(value) : null;\n\t\tif (existingId && existingId !== id) {\n\t\t\tconst str = existingId.toString();\n\t\t\tthrow new Error(`The value has already been registered with a different identity (${str})`);\n\t\t}\n\n\t\t// Adding the same value with the same id is a noop, return the original handle.\n\t\tif (existingEntry && existingId) {\n\t\t\treturn existingEntry.handle;\n\t\t}\n\n\t\tconst handle = {\n\t\t\tdestroy: () => {\n\t\t\t\thandle.destroy = noop;\n\t\t\t\tgetState(this).entryMap.delete(id);\n\t\t\t}\n\t\t};\n\n\t\tentryMap.set(id, { handle, value });\n\t\tgetState(this).idMap.set(value, id);\n\n\t\treturn handle;\n\t}\n\n\tentries(): IterableIterator<[Identity, V]> {\n\t\tconst values = new List<[Identity, V]>();\n\n\t\tgetState(this).entryMap.forEach((value: Entry<V>, key: Identity) => {\n\t\t\tvalues.add([key, value.value]);\n\t\t});\n\n\t\treturn values.values();\n\t}\n\n\tvalues(): IterableIterator<V> {\n\t\tconst values = new List<V>();\n\n\t\tgetState(this).entryMap.forEach((value: Entry<V>, key: Identity) => {\n\t\t\tvalues.add(value.value);\n\t\t});\n\n\t\treturn values.values();\n\t}\n\n\tids(): IterableIterator<Identity> {\n\t\treturn getState(this).entryMap.keys();\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[Identity, V]> {\n\t\treturn this.entries();\n\t}\n}\n\nexport default IdentityRegistry;\n"]}