{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../../src/core/request.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,kCAA6B;IAC7B,qCAAgC;IAEhC,+DAA0D;IAC1D,+CAA0C;IAE7B,QAAA,gBAAgB,GAAG,IAAI,0BAAgB,EAAE,CAAC;IAEvD,IAAM,OAAO,GAUJ,iBAAiB,GAAW,EAAE,OAA4B;QAA5B,wBAAA,EAAA,YAA4B;QAClE,IAAI,CAAC;YACJ,MAAM,CAAC,wBAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC3D,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,cAAI,CAAC,MAAM,CAAW,KAAK,CAAC,CAAC;QACrC,CAAC;IACF,CAAC,CAAC;IAEF,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;QACnD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE;YACpD,KAAK,EAAL,UAAM,GAAW,EAAE,OAA4B;gBAA5B,wBAAA,EAAA,YAA4B;gBAC9C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACjC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;gBACxB,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC9B,CAAC;SACD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;QAC9B,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE;YACpD,KAAK,EAAL,UAAM,GAAW,EAAE,OAA4B;gBAA5B,wBAAA,EAAA,YAA4B;gBAC9C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACjC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;gBACxB,MAAM,CAAiC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC9D,CAAC;SACD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,oBAAoB,EAAE;QACpD,KAAK,YAAC,QAAkB;YACvB,wBAAgB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC/C,CAAC;KACD,CAAC,CAAC;IAEH,wBAAgB,CAAC,kBAAkB,CAAC,aAAG,CAAC,CAAC;IAEzC,EAAE,CAAC,CAAC,aAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACtB,2BAA2B;QAC3B,qEAAO,0BAA0B,qHAAE,IAAI,CAAC,UAAC,IAAI;YAC5C,wBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,kBAAe,OAAO,CAAC;IAEvB,6CAAuD;IAA9C,4BAAA,OAAO,CAAW;IAC3B,uDAAiE;IAAxD,sCAAA,OAAO,CAAgB","sourcesContent":["import has from '../has/has';\nimport Task from './async/Task';\nimport { RequestOptions, Response, Provider, UploadObservableTask } from './request/interfaces';\nimport ProviderRegistry from './request/ProviderRegistry';\nimport xhr from './request/providers/xhr';\n\nexport const providerRegistry = new ProviderRegistry();\n\nconst request: {\n\t(url: string, options?: RequestOptions): Task<Response>;\n\tdelete(url: string, options?: RequestOptions): Task<Response>;\n\tget(url: string, options?: RequestOptions): Task<Response>;\n\thead(url: string, options?: RequestOptions): Task<Response>;\n\toptions(url: string, options?: RequestOptions): Task<Response>;\n\tpost(url: string, options?: RequestOptions): UploadObservableTask<Response>;\n\tput(url: string, options?: RequestOptions): UploadObservableTask<Response>;\n\n\tsetDefaultProvider(provider: Provider): void;\n} = <any>function request(url: string, options: RequestOptions = {}): Task<Response> {\n\ttry {\n\t\treturn providerRegistry.match(url, options)(url, options);\n\t} catch (error) {\n\t\treturn Task.reject<Response>(error);\n\t}\n};\n\n['DELETE', 'GET', 'HEAD', 'OPTIONS'].forEach((method) => {\n\tObject.defineProperty(request, method.toLowerCase(), {\n\t\tvalue(url: string, options: RequestOptions = {}): Task<Response> {\n\t\t\toptions = Object.create(options);\n\t\t\toptions.method = method;\n\t\t\treturn request(url, options);\n\t\t}\n\t});\n});\n\n['POST', 'PUT'].forEach((method) => {\n\tObject.defineProperty(request, method.toLowerCase(), {\n\t\tvalue(url: string, options: RequestOptions = {}): UploadObservableTask<Response> {\n\t\t\toptions = Object.create(options);\n\t\t\toptions.method = method;\n\t\t\treturn <UploadObservableTask<Response>>request(url, options);\n\t\t}\n\t});\n});\n\nObject.defineProperty(request, 'setDefaultProvider', {\n\tvalue(provider: Provider) {\n\t\tproviderRegistry.setDefaultProvider(provider);\n\t}\n});\n\nproviderRegistry.setDefaultProvider(xhr);\n\nif (has('host-node')) {\n\t// tslint:disable-next-line\n\timport('./request/providers/node').then((node) => {\n\t\tproviderRegistry.setDefaultProvider(node.default);\n\t});\n}\n\nexport default request;\nexport * from './request/interfaces';\nexport { default as Headers } from './request/Headers';\nexport { default as TimeoutError } from './request/TimeoutError';\nexport { ResponseData } from './request/Response';\n"]}