{"version":3,"file":"xhr.js","sourceRoot":"","sources":["../../../../../../src/core/request/providers/xhr.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handle } from '../../interfaces';\nimport global from '../../../shim/global';\nimport WeakMap from '../../../shim/WeakMap';\nimport Task, { State } from '../../async/Task';\nimport has from '../../has';\nimport Observable from '../../Observable';\nimport { createTimer } from '../../util';\nimport Headers from '../Headers';\nimport { RequestOptions, UploadObservableTask } from '../interfaces';\nimport Response, { getArrayBufferFromBlob, getTextFromBlob } from '../Response';\nimport SubscriptionPool from '../SubscriptionPool';\nimport TimeoutError from '../TimeoutError';\nimport { generateRequestUrl } from '../util';\n\n/**\n * Request options specific to an XHR request\n */\nexport interface XhrRequestOptions extends RequestOptions {\n\t/**\n\t * Controls whether or not the request is synchronous (blocks the main thread) or asynchronous (default).\n\t */\n\tblockMainThread?: boolean;\n\t/**\n\t * Controls whether or not the X-Requested-With header is added to the request (default true). Set to false to not\n\t * include the header.\n\t */\n\tincludeRequestedWithHeader?: boolean;\n\t/**\n\t * Controls whether or not to subscribe to events on `XMLHttpRequest.upload`, if available. This causes all requests\n\t * to be preflighted (https://xhr.spec.whatwg.org/#request)\n\t */\n\tincludeUploadProgress?: boolean;\n}\n\ninterface RequestData {\n\ttask: Task<XMLHttpRequest>;\n\tused: boolean;\n\trequestOptions: XhrRequestOptions;\n\tnativeResponse: XMLHttpRequest;\n\turl: string;\n\tdownloadObservable: Observable<number>;\n\tdataObservable: Observable<any>;\n}\n\nconst dataMap = new WeakMap<XhrResponse, RequestData>();\n\nfunction getDataTask(response: XhrResponse): Task<XMLHttpRequest> {\n\tconst data = dataMap.get(response)!;\n\n\tif (data.used) {\n\t\treturn Task.reject<any>(new TypeError('Body already read'));\n\t}\n\n\tdata.used = true;\n\n\treturn data.task;\n}\n\n/**\n * Wraps an XHR request in a response that mimics the fetch API\n */\nexport class XhrResponse extends Response {\n\treadonly headers: Headers;\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\n\tget bodyUsed(): boolean {\n\t\treturn dataMap.get(this)!.used;\n\t}\n\n\tget nativeResponse(): XMLHttpRequest {\n\t\treturn dataMap.get(this)!.nativeResponse;\n\t}\n\n\tget requestOptions(): XhrRequestOptions {\n\t\treturn dataMap.get(this)!.requestOptions;\n\t}\n\n\tget url(): string {\n\t\treturn dataMap.get(this)!.url;\n\t}\n\n\tget download(): Observable<number> {\n\t\treturn dataMap.get(this)!.downloadObservable;\n\t}\n\n\tget data(): Observable<any> {\n\t\treturn dataMap.get(this)!.dataObservable;\n\t}\n\n\tconstructor(request: XMLHttpRequest) {\n\t\tsuper();\n\n\t\tconst headers = (this.headers = new Headers());\n\n\t\tconst responseHeaders = request.getAllResponseHeaders();\n\t\tif (responseHeaders) {\n\t\t\tconst lines = responseHeaders.split(/\\r\\n/g);\n\n\t\t\tfor (let i = 0; i < lines.length; i++) {\n\t\t\t\tconst match = lines[i].match(/^(.*?): (.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\theaders.append(match[1], match[2]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.status = request.status;\n\t\tthis.ok = this.status >= 200 && this.status < 300;\n\t\tthis.statusText = request.statusText || 'OK';\n\t}\n\n\tarrayBuffer(): Task<ArrayBuffer> {\n\t\treturn Task.reject<ArrayBuffer>(new Error('ArrayBuffer not supported'));\n\t}\n\n\tblob(): Task<Blob> {\n\t\treturn Task.reject<Blob>(new Error('Blob not supported'));\n\t}\n\n\tformData(): Task<FormData> {\n\t\treturn Task.reject<FormData>(new Error('FormData not supported'));\n\t}\n\n\ttext(): Task<string> {\n\t\treturn <any>getDataTask(this).then((request: XMLHttpRequest) => {\n\t\t\treturn String(request.responseText);\n\t\t});\n\t}\n\n\txml(): Task<Document> {\n\t\treturn <any>this.text().then((text: string) => {\n\t\t\tconst parser = new DOMParser();\n\t\t\tconst contentType = this.headers.get('content-type');\n\t\t\treturn parser.parseFromString(text, contentType ? contentType.split(';')[0] : 'text/html');\n\t\t});\n\t}\n}\n\nif (has('blob')) {\n\tXhrResponse.prototype.blob = function(this: XhrResponse): Task<Blob> {\n\t\treturn <any>getDataTask(this).then((request: XMLHttpRequest) => request.response);\n\t};\n\n\tXhrResponse.prototype.text = function(this: XhrResponse): Task<string> {\n\t\treturn <any>this.blob().then(getTextFromBlob);\n\t};\n\n\tif (has('arraybuffer')) {\n\t\tXhrResponse.prototype.arrayBuffer = function(this: XhrResponse): Task<ArrayBuffer> {\n\t\t\treturn <any>this.blob().then(getArrayBufferFromBlob);\n\t\t};\n\t}\n}\n\nif (has('formdata')) {\n\tXhrResponse.prototype.formData = function(this: XhrResponse): Task<FormData> {\n\t\treturn <any>this.text().then((text: string) => {\n\t\t\tconst data = new FormData();\n\n\t\t\ttext\n\t\t\t\t.trim()\n\t\t\t\t.split('&')\n\t\t\t\t.forEach((keyValues) => {\n\t\t\t\t\tif (keyValues) {\n\t\t\t\t\t\tconst pairs = keyValues.split('=');\n\t\t\t\t\t\tconst name = (pairs.shift() || '').replace(/\\+/, ' ');\n\t\t\t\t\t\tconst value = pairs.join('=').replace(/\\+/, ' ');\n\n\t\t\t\t\t\tdata.append(decodeURIComponent(name), decodeURIComponent(value));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\treturn data;\n\t\t});\n\t};\n}\n\nfunction noop() {}\n\nfunction setOnError(request: XMLHttpRequest, reject: Function) {\n\trequest.addEventListener('error', function(event) {\n\t\treject(new TypeError(event.error || 'Network request failed'));\n\t});\n}\n\nexport default function xhr(url: string, options: XhrRequestOptions = {}): UploadObservableTask<XhrResponse> {\n\tconst request = new XMLHttpRequest();\n\tconst requestUrl = generateRequestUrl(url, options);\n\n\toptions = Object.create(options);\n\n\tif (!options.method) {\n\t\toptions.method = 'GET';\n\t}\n\n\tlet isAborted = false;\n\n\tfunction abort() {\n\t\tisAborted = true;\n\t\tif (request) {\n\t\t\trequest.abort();\n\t\t\trequest.onreadystatechange = noop;\n\t\t}\n\t}\n\n\tlet timeoutHandle: Handle;\n\tlet timeoutReject: Function;\n\n\tconst task = <UploadObservableTask<XhrResponse>>new Task<XhrResponse>((resolve, reject) => {\n\t\ttimeoutReject = reject;\n\n\t\trequest.onreadystatechange = function() {\n\t\t\tif (isAborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (request.readyState === 2) {\n\t\t\t\tconst response = new XhrResponse(request);\n\n\t\t\t\tconst downloadSubscriptionPool = new SubscriptionPool<number>();\n\t\t\t\tconst dataSubscriptionPool = new SubscriptionPool<any>();\n\n\t\t\t\tconst task = new Task<XMLHttpRequest>((resolve, reject) => {\n\t\t\t\t\ttimeoutReject = reject;\n\n\t\t\t\t\trequest.onprogress = function(event: any) {\n\t\t\t\t\t\tif (isAborted) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdownloadSubscriptionPool.next(event.loaded);\n\t\t\t\t\t};\n\n\t\t\t\t\trequest.onreadystatechange = function() {\n\t\t\t\t\t\tif (isAborted) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (request.readyState === 4) {\n\t\t\t\t\t\t\trequest.onreadystatechange = noop;\n\t\t\t\t\t\t\ttimeoutHandle && timeoutHandle.destroy();\n\n\t\t\t\t\t\t\tdataSubscriptionPool.next(request.response);\n\t\t\t\t\t\t\tdataSubscriptionPool.complete();\n\n\t\t\t\t\t\t\tresolve(request);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tsetOnError(request, reject);\n\t\t\t\t}, abort);\n\n\t\t\t\tdataMap.set(response, {\n\t\t\t\t\ttask,\n\t\t\t\t\tused: false,\n\t\t\t\t\tnativeResponse: request,\n\t\t\t\t\trequestOptions: options,\n\t\t\t\t\turl: requestUrl,\n\t\t\t\t\tdownloadObservable: new Observable<number>((observer) => downloadSubscriptionPool.add(observer)),\n\t\t\t\t\tdataObservable: new Observable<any>((observer) => dataSubscriptionPool.add(observer))\n\t\t\t\t});\n\n\t\t\t\tresolve(response);\n\t\t\t}\n\t\t};\n\n\t\tsetOnError(request, reject);\n\t}, abort);\n\n\trequest.open(options.method, requestUrl, !options.blockMainThread, options.user, options.password);\n\n\tif (has('filereader') && has('blob')) {\n\t\trequest.responseType = 'blob';\n\t}\n\n\tif (options.timeout && options.timeout > 0 && options.timeout !== Infinity) {\n\t\ttimeoutHandle = createTimer(() => {\n\t\t\t// Reject first, since aborting will also fire onreadystatechange which would reject with a\n\t\t\t// less specific error.  (This is also why we set up our own timeout rather than using\n\t\t\t// native timeout and ontimeout, because that aborts and fires onreadystatechange before ontimeout.)\n\t\t\ttimeoutReject && timeoutReject(new TimeoutError('The XMLHttpRequest request timed out'));\n\t\t\tabort();\n\t\t}, options.timeout);\n\t}\n\n\tlet hasContentTypeHeader = false;\n\tlet hasRequestedWithHeader = false;\n\tconst { includeRequestedWithHeader = true, includeUploadProgress = true } = options;\n\n\tif (options.headers) {\n\t\tconst requestHeaders = new Headers(options.headers);\n\n\t\thasRequestedWithHeader = requestHeaders.has('x-requested-with');\n\t\thasContentTypeHeader = requestHeaders.has('content-type');\n\n\t\tfor (const [key, value] of requestHeaders) {\n\t\t\trequest.setRequestHeader(key, value);\n\t\t}\n\t}\n\n\tif (!hasRequestedWithHeader && includeRequestedWithHeader) {\n\t\trequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t}\n\n\tif (!hasContentTypeHeader && has('formdata') && options.body instanceof global.FormData) {\n\t\t// Assume that most forms do not contain large binary files. If that is not the case,\n\t\t// then \"multipart/form-data\" should be manually specified as the \"Content-Type\" header.\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n\n\ttask.finally(() => {\n\t\tif (task.state !== State.Fulfilled) {\n\t\t\trequest.onreadystatechange = noop;\n\t\t\ttimeoutHandle && timeoutHandle.destroy();\n\t\t}\n\t});\n\n\tif (includeUploadProgress) {\n\t\tconst uploadObserverPool = new SubscriptionPool<number>();\n\t\ttask.upload = new Observable<number>((observer) => uploadObserverPool.add(observer));\n\n\t\tif (has('host-browser') || has('web-worker-xhr-upload')) {\n\t\t\trequest.upload.addEventListener('progress', (event) => {\n\t\t\t\tuploadObserverPool.next(event.loaded);\n\t\t\t});\n\t\t}\n\t}\n\n\trequest.send(options.body || null);\n\n\treturn task;\n}\n"]}