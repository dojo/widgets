{"version":3,"file":"node.js","sourceRoot":"","sources":["../../../../../../src/core/request/providers/node.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handle } from '../../interfaces';\nimport Set from '../../../shim/Set';\nimport WeakMap from '../../../shim/WeakMap';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as urlUtil from 'url';\nimport * as zlib from 'zlib';\nimport Task from '../../async/Task';\nimport { deepAssign } from '../../lang';\nimport { queueTask } from '../../queue';\nimport { createTimer } from '../../util';\nimport Headers from '../Headers';\nimport { RequestOptions, UploadObservableTask } from '../interfaces';\nimport Response from '../Response';\nimport TimeoutError from '../TimeoutError';\nimport { Readable } from 'stream';\nimport Observable from '../../Observable';\nimport SubscriptionPool from '../SubscriptionPool';\n\n/**\n * Request options specific to a node request. For HTTPS options, see\n * https://nodejs.org/api/tls.html#tls_tls_connect_options_callback for more details.\n */\nexport interface NodeRequestOptions extends RequestOptions {\n\t/**\n\t * User-agent header\n\t */\n\tagent?: any;\n\t/**\n\t * If specified, the request body is read from the stream specified here, rather than from the `body` field.\n\t */\n\tbodyStream?: Readable;\n\t/**\n\t * HTTPS optionally override the trusted CA certificates\n\t */\n\tca?: any;\n\t/**\n\t * HTTPS optional cert chains in PEM format. One cert chain should be provided per private key.\n\t */\n\tcert?: string;\n\t/**\n\t * HTTPS optional cipher suite specification\n\t */\n\tciphers?: string;\n\tdataEncoding?: string;\n\t/**\n\t * Whether or not to automatically follow redirects (default true)\n\t */\n\tfollowRedirects?: boolean;\n\t/**\n\t * HTTPS optional private key in PEM format.\n\t */\n\tkey?: string;\n\t/**\n\t * Local interface to bind for network connections.\n\t */\n\tlocalAddress?: string;\n\t/**\n\t * HTTPS optional shared passphrase used for a single private key and/or a PFX.\n\t */\n\tpassphrase?: string;\n\t/**\n\t * HTTPS optional PFX or PKCS12 encoded private key and certificate chain.\n\t */\n\tpfx?: any;\n\t/**\n\t * Optional proxy address. If specified, requests will be sent through this url.\n\t */\n\tproxy?: string;\n\t/**\n\t * HTTPS If not false the server will reject any connection which is not authorized with the list of supplied CAs\n\t */\n\trejectUnauthorized?: boolean;\n\t/**\n\t * HTTPS optional SSL method to use, default is \"SSLv23_method\"\n\t */\n\tsecureProtocol?: string;\n\t/**\n\t * Unix Domain Socket (use one of host:port or socketPath)\n\t */\n\tsocketPath?: string;\n\t/**\n\t * Whether or not to add the gzip and deflate accept headers (default true)\n\t */\n\tacceptCompression?: boolean;\n\t/**\n\t * A set of options to set on the HTTP request\n\t */\n\tsocketOptions?: {\n\t\t/**\n\t\t * Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket.\n\t\t */\n\t\tkeepAlive?: number;\n\t\t/**\n\t\t * Disables the Nagle algorithm. By default TCP connections use the Nagle algorithm, they buffer data before sending it off.\n\t\t */\n\t\tnoDelay?: boolean;\n\t\t/**\n\t\t * Number of milliseconds before the HTTP request times out\n\t\t */\n\t\ttimeout?: number;\n\t};\n\t/**\n\t * Stream encoding on incoming HTTP response\n\t */\n\tstreamEncoding?: string;\n\t/**\n\t * Options to control redirect follow logic\n\t */\n\tredirectOptions?: {\n\t\t/**\n\t\t * The limit to the number of redirects that will be followed (default 15). This is used to prevent infinite\n\t\t * redirect loops.\n\t\t */\n\t\tlimit?: number;\n\t\tcount?: number;\n\t\t/**\n\t\t * Whether or not to keep the original HTTP method during 301 redirects (default false).\n\t\t */\n\t\tkeepOriginalMethod?: boolean;\n\t};\n}\n\n// TODO: This should be read from the package and not hard coded!\nlet version = '2.0.0-pre';\n\n/**\n * If not overridden, redirects will only be processed this many times before aborting (per request).\n * @type {number}\n */\nconst DEFAULT_REDIRECT_LIMIT = 15;\n\n/**\n * Options to be passed to node's request\n */\ninterface Options {\n\tagent?: any;\n\tauth?: string;\n\theaders?: { [name: string]: string };\n\thost?: string;\n\thostname?: string;\n\tlocalAddress?: string;\n\tmethod?: string;\n\tpath?: string;\n\tport?: number;\n\tsocketPath?: string;\n}\n\n/**\n * HTTPS specific options for node\n */\ninterface HttpsOptions extends Options {\n\tca?: any;\n\tcert?: string;\n\tciphers?: string;\n\tkey?: string;\n\tpassphrase?: string;\n\tpfx?: any;\n\trejectUnauthorized?: boolean;\n\tsecureProtocol?: string;\n}\n\ninterface RequestData {\n\ttask: Task<http.IncomingMessage>;\n\tbuffer: any[];\n\tdata: Buffer;\n\tsize: number;\n\tused: boolean;\n\tnativeResponse: http.IncomingMessage;\n\trequestOptions: NodeRequestOptions;\n\turl: string;\n\tdownloadObservable: Observable<number>;\n\tdataObservable: Observable<any>;\n}\n\nconst dataMap = new WeakMap<NodeResponse, RequestData>();\nconst discardedDuplicates = new Set<string>([\n\t'age',\n\t'authorization',\n\t'content-length',\n\t'content-type',\n\t'etag',\n\t'expires',\n\t'from',\n\t'host',\n\t'if-modified-since',\n\t'if-unmodified-since',\n\t'last-modified',\n\t'location',\n\t'max-forwards',\n\t'proxy-authorization',\n\t'referer',\n\t'retry-after',\n\t'user-agent'\n]);\n\nfunction getDataTask(response: NodeResponse): Task<RequestData> {\n\tconst data = dataMap.get(response)!;\n\n\tif (data.used) {\n\t\treturn Task.reject<any>(new TypeError('Body already read'));\n\t}\n\n\tdata.used = true;\n\n\treturn <Task<RequestData>>data.task.then((_) => data);\n}\n\n/**\n * Turn a node native response object into something that resembles the fetch api\n */\nexport class NodeResponse extends Response {\n\treadonly headers: Headers;\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\n\tdownloadBody = true;\n\n\tget bodyUsed(): boolean {\n\t\treturn dataMap.get(this)!.used;\n\t}\n\n\tget nativeResponse(): http.IncomingMessage {\n\t\treturn dataMap.get(this)!.nativeResponse;\n\t}\n\n\tget requestOptions(): NodeRequestOptions {\n\t\treturn dataMap.get(this)!.requestOptions;\n\t}\n\n\tget url(): string {\n\t\treturn dataMap.get(this)!.url;\n\t}\n\n\tget download(): Observable<number> {\n\t\treturn dataMap.get(this)!.downloadObservable;\n\t}\n\n\tget data(): Observable<any> {\n\t\treturn dataMap.get(this)!.dataObservable;\n\t}\n\n\tconstructor(response: http.IncomingMessage) {\n\t\tsuper();\n\n\t\tconst headers = (this.headers = new Headers());\n\t\tfor (let key in response.headers) {\n\t\t\tconst value = response.headers[key];\n\t\t\tif (value) {\n\t\t\t\tif (discardedDuplicates.has(key) && !Array.isArray(value)) {\n\t\t\t\t\theaders.append(key, value);\n\t\t\t\t}\n\t\t\t\t(Array.isArray(value) ? value : value.split(/\\s*,\\s*/)).forEach((v) => {\n\t\t\t\t\theaders.append(key, v);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.status = response.statusCode || 0;\n\t\tthis.ok = this.status >= 200 && this.status < 300;\n\t\tthis.statusText = response.statusMessage || '';\n\t}\n\n\tarrayBuffer(): Task<ArrayBuffer> {\n\t\treturn <any>getDataTask(this).then((data) => {\n\t\t\tif (data) {\n\t\t\t\treturn data.data;\n\t\t\t}\n\n\t\t\treturn new Buffer([]);\n\t\t});\n\t}\n\n\tblob(): Task<Blob> {\n\t\t// Node doesn't support Blobs\n\t\treturn Task.reject<Blob>(new Error('Blob not supported'));\n\t}\n\n\tformData(): Task<FormData> {\n\t\treturn Task.reject<FormData>(new Error('FormData not supported'));\n\t}\n\n\ttext(): Task<string> {\n\t\treturn <any>getDataTask(this).then((data) => {\n\t\t\treturn String(data ? data.data : '');\n\t\t});\n\t}\n}\n\nfunction redirect(\n\tresolve: (p?: any) => void,\n\treject: (_?: Error) => void,\n\toriginalUrl: string,\n\tredirectUrl: string | null,\n\toptions: NodeRequestOptions\n): boolean {\n\tif (!options.redirectOptions) {\n\t\toptions.redirectOptions = {};\n\t}\n\n\tconst { limit: redirectLimit = DEFAULT_REDIRECT_LIMIT, count: redirectCount = 0 } = options.redirectOptions;\n\tconst { followRedirects = true } = options;\n\n\tif (!followRedirects) {\n\t\treturn false;\n\t}\n\n\t// we only check for undefined here because empty string redirects are now allowed\n\t// (they'll resolve to the current url)\n\tif (redirectUrl === undefined || redirectUrl === null) {\n\t\treject(new Error('asked to redirect but no location header was found'));\n\t\treturn true;\n\t}\n\n\tif (redirectCount > redirectLimit) {\n\t\treject(new Error(`too many redirects, limit reached at ${redirectLimit}`));\n\t\treturn true;\n\t}\n\n\toptions.redirectOptions.count = redirectCount + 1;\n\n\t// we wrap the url in a call to node's URL.resolve which will handle relative and partial\n\t// redirects (like \"/another-page\" on the same domain).\n\tresolve(node(urlUtil.resolve(originalUrl, redirectUrl), options));\n\n\treturn true;\n}\n\nexport function getAuth(proxyAuth: string | undefined, options: NodeRequestOptions): string | undefined {\n\tif (proxyAuth) {\n\t\treturn proxyAuth;\n\t}\n\n\tif (options.user || options.password) {\n\t\treturn `${options.user || ''}:${options.password || ''}`;\n\t}\n\n\treturn undefined;\n}\n\nexport default function node(url: string, options: NodeRequestOptions = {}): UploadObservableTask<NodeResponse> {\n\tconst parsedUrl = urlUtil.parse(options.proxy || url);\n\n\tconst requestOptions: HttpsOptions = {\n\t\tagent: options.agent,\n\t\tauth: getAuth(parsedUrl.auth, options),\n\t\tca: options.ca,\n\t\tcert: options.cert,\n\t\tciphers: options.ciphers,\n\t\thost: parsedUrl.host,\n\t\thostname: parsedUrl.hostname,\n\t\tkey: options.key,\n\t\tlocalAddress: options.localAddress,\n\t\tmethod: options.method ? options.method.toUpperCase() : 'GET',\n\t\tpassphrase: options.passphrase,\n\t\tpath: parsedUrl.path,\n\t\tpfx: options.pfx,\n\t\tport: Number(parsedUrl.port),\n\t\trejectUnauthorized: options.rejectUnauthorized,\n\t\tsecureProtocol: options.secureProtocol,\n\t\tsocketPath: options.socketPath\n\t};\n\n\trequestOptions.headers = <{ [key: string]: string }>options.headers || {};\n\n\tif (\n\t\t!Object.keys(requestOptions.headers)\n\t\t\t.map((headerName) => headerName.toLowerCase())\n\t\t\t.some((headerName) => headerName === 'user-agent')\n\t) {\n\t\trequestOptions.headers['user-agent'] = 'dojo/' + version + ' Node.js/' + process.version.replace(/^v/, '');\n\t}\n\n\tif (options.proxy) {\n\t\trequestOptions.path = url;\n\t\tif (parsedUrl.auth) {\n\t\t\trequestOptions.headers['proxy-authorization'] = 'Basic ' + new Buffer(parsedUrl.auth).toString('base64');\n\t\t}\n\n\t\tconst parsedProxyUrl = urlUtil.parse(url);\n\t\tif (parsedProxyUrl.host) {\n\t\t\trequestOptions.headers['host'] = parsedProxyUrl.host;\n\t\t}\n\n\t\tif (parsedProxyUrl.auth) {\n\t\t\trequestOptions.auth = parsedProxyUrl.auth;\n\t\t}\n\t}\n\n\tconst { acceptCompression = true } = options;\n\tif (acceptCompression) {\n\t\trequestOptions.headers['Accept-Encoding'] = 'gzip, deflate';\n\t}\n\n\tconst request = parsedUrl.protocol === 'https:' ? https.request(requestOptions) : http.request(requestOptions);\n\n\tconst uploadObserverPool = new SubscriptionPool<number>();\n\n\tconst requestTask = <UploadObservableTask<NodeResponse>>new Task<NodeResponse>(\n\t\t(resolve, reject) => {\n\t\t\tlet timeoutHandle: Handle;\n\t\t\tlet timeoutReject: Function = reject;\n\n\t\t\tif (options.socketOptions) {\n\t\t\t\tif (options.socketOptions.timeout) {\n\t\t\t\t\trequest.setTimeout(options.socketOptions.timeout);\n\t\t\t\t}\n\n\t\t\t\tif ('noDelay' in options.socketOptions) {\n\t\t\t\t\trequest.setNoDelay(options.socketOptions.noDelay);\n\t\t\t\t}\n\n\t\t\t\tif ('keepAlive' in options.socketOptions) {\n\t\t\t\t\tconst initialDelay: number | undefined = options.socketOptions.keepAlive;\n\t\t\t\t\tif (initialDelay !== undefined) {\n\t\t\t\t\t\trequest.setSocketKeepAlive(initialDelay >= 0, initialDelay);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trequest.once('response', (message: http.IncomingMessage) => {\n\t\t\t\tconst response = new NodeResponse(message);\n\n\t\t\t\t// Redirection handling defaults to true in order to harmonise with the XHR provider, which will always\n\t\t\t\t// follow redirects\n\t\t\t\tif (response.status >= 300 && response.status < 400) {\n\t\t\t\t\tconst redirectOptions = options.redirectOptions || {};\n\t\t\t\t\tconst newOptions = deepAssign({}, options);\n\n\t\t\t\t\tswitch (response.status) {\n\t\t\t\t\t\tcase 300:\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * Note about 300 redirects. RFC 2616 doesn't specify what to do with them, it is up to the client to \"pick\n\t\t\t\t\t\t\t * the right one\".  We're picking like Chrome does, just don't pick any.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 301:\n\t\t\t\t\t\tcase 302:\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * RFC 2616 says,\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t *     If the 301 status code is received in response to a request other\n\t\t\t\t\t\t\t *     than GET or HEAD, the user agent MUST NOT automatically redirect the\n\t\t\t\t\t\t\t *     request unless it can be confirmed by the user, since this might\n\t\t\t\t\t\t\t *       change the conditions under which the request was issued.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t *     Note: When automatically redirecting a POST request after\n\t\t\t\t\t\t\t *     receiving a 301 status code, some existing HTTP/1.0 user agents\n\t\t\t\t\t\t\t *     will erroneously change it into a GET request.\n\t\t\t\t\t\t\t *\n\t\t\t\t\t\t\t * We're going to be one of those erroneous agents, to prevent the request from failing..\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\trequestOptions.method !== 'GET' &&\n\t\t\t\t\t\t\t\trequestOptions.method !== 'HEAD' &&\n\t\t\t\t\t\t\t\t!redirectOptions.keepOriginalMethod\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tnewOptions.method = 'GET';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (redirect(resolve, reject, url, response.headers.get('location'), newOptions)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 303:\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * The response to the request can be found under a different URI and\n\t\t\t\t\t\t\t * SHOULD be retrieved using a GET method on that resource.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (requestOptions.method !== 'GET') {\n\t\t\t\t\t\t\t\tnewOptions.method = 'GET';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (redirect(resolve, reject, url, response.headers.get('location'), newOptions)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 304:\n\t\t\t\t\t\t\t// do nothing so this can fall through and return the response as normal. Nothing more can\n\t\t\t\t\t\t\t// be done for 304\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 305:\n\t\t\t\t\t\t\tif (!response.headers.get('location')) {\n\t\t\t\t\t\t\t\treject(new Error('expected Location header to contain a proxy url'));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewOptions.proxy = response.headers.get('location') || '';\n\t\t\t\t\t\t\t\tif (redirect(resolve, reject, url, '', newOptions)) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 307:\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t *  If the 307 status code is received in response to a request other\n\t\t\t\t\t\t\t *  than GET or HEAD, the user agent MUST NOT automatically redirect the\n\t\t\t\t\t\t\t *  request unless it can be confirmed by the user, since this might\n\t\t\t\t\t\t\t *  change the conditions under which the request was issued.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (redirect(resolve, reject, url, response.headers.get('location'), newOptions)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treject(new Error('unhandled redirect status ' + response.status));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toptions.streamEncoding && message.setEncoding(options.streamEncoding);\n\n\t\t\t\tconst downloadSubscriptionPool = new SubscriptionPool<number>();\n\t\t\t\tconst dataSubscriptionPool = new SubscriptionPool<any>();\n\n\t\t\t\t/*\n\t\t\t [RFC 2616](https://tools.ietf.org/html/rfc2616#page-118) says that content-encoding can have multiple\n\t\t\t values, so we split them here and put them in a list to process later.\n\t\t\t */\n\t\t\t\tconst contentEncodings = response.headers.getAll('content-encoding');\n\n\t\t\t\tconst task = new Task<http.IncomingMessage>(\n\t\t\t\t\t(resolve, reject) => {\n\t\t\t\t\t\ttimeoutReject = reject;\n\n\t\t\t\t\t\t// we queue this up for later to allow listeners to register themselves before we start receiving data\n\t\t\t\t\t\tqueueTask(() => {\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t * Note that this is the raw data, if your input stream is zipped, and you are piecing\n\t\t\t\t\t * together the downloaded data, you'll have to decompress it yourself\n\t\t\t\t\t */\n\t\t\t\t\t\t\tmessage.on('data', (chunk: any) => {\n\t\t\t\t\t\t\t\tdataSubscriptionPool.next(chunk);\n\n\t\t\t\t\t\t\t\tif (response.downloadBody) {\n\t\t\t\t\t\t\t\t\tdata.buffer.push(chunk);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tdata.size +=\n\t\t\t\t\t\t\t\t\ttypeof chunk === 'string'\n\t\t\t\t\t\t\t\t\t\t? Buffer.byteLength(chunk, options.streamEncoding)\n\t\t\t\t\t\t\t\t\t\t: chunk.length;\n\n\t\t\t\t\t\t\t\tdownloadSubscriptionPool.next(data.size);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tmessage.once('end', () => {\n\t\t\t\t\t\t\t\ttimeoutHandle && timeoutHandle.destroy();\n\n\t\t\t\t\t\t\t\tlet dataAsBuffer = options.streamEncoding\n\t\t\t\t\t\t\t\t\t? new Buffer(data.buffer.join(''), 'utf8')\n\t\t\t\t\t\t\t\t\t: Buffer.concat(data.buffer, data.size);\n\n\t\t\t\t\t\t\t\tconst handleEncoding = function() {\n\t\t\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t Content encoding is ordered by the order in which they were applied to the\n\t\t\t\t\t\t\t content, so do undo the encoding we have to start at the end and work backwards.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\t\t\tif (contentEncodings.length) {\n\t\t\t\t\t\t\t\t\t\tconst encoding = contentEncodings.pop()!.trim().toLowerCase();\n\n\t\t\t\t\t\t\t\t\t\tif (encoding === '' || encoding === 'none' || encoding === 'identity') {\n\t\t\t\t\t\t\t\t\t\t\t// do nothing, response stream is as-is\n\t\t\t\t\t\t\t\t\t\t\thandleEncoding();\n\t\t\t\t\t\t\t\t\t\t} else if (encoding === 'gzip') {\n\t\t\t\t\t\t\t\t\t\t\tzlib.gunzip(dataAsBuffer, function(err: Error | null, result: Buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdataAsBuffer = result;\n\t\t\t\t\t\t\t\t\t\t\t\thandleEncoding();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else if (encoding === 'deflate') {\n\t\t\t\t\t\t\t\t\t\t\tzlib.inflate(dataAsBuffer, function(err: Error | null, result: Buffer) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdataAsBuffer = result;\n\t\t\t\t\t\t\t\t\t\t\t\thandleEncoding();\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\treject(new Error('Unsupported content encoding, ' + encoding));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdata.data = dataAsBuffer;\n\n\t\t\t\t\t\t\t\t\t\tresolve(message);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\thandleEncoding();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tconst data: RequestData = {\n\t\t\t\t\ttask,\n\t\t\t\t\tbuffer: [],\n\t\t\t\t\tdata: Buffer.alloc(0),\n\t\t\t\t\tsize: 0,\n\t\t\t\t\tused: false,\n\t\t\t\t\turl: url,\n\t\t\t\t\trequestOptions: options,\n\t\t\t\t\tnativeResponse: message,\n\t\t\t\t\tdownloadObservable: new Observable<number>((observer) => downloadSubscriptionPool.add(observer)),\n\t\t\t\t\tdataObservable: new Observable<any>((observer) => dataSubscriptionPool.add(observer))\n\t\t\t\t};\n\n\t\t\t\tdataMap.set(response, data);\n\n\t\t\t\tresolve(response);\n\t\t\t});\n\n\t\t\trequest.once('error', reject);\n\n\t\t\tif (options.bodyStream) {\n\t\t\t\toptions.bodyStream.pipe(request);\n\t\t\t\tlet uploadedSize = 0;\n\n\t\t\t\toptions.bodyStream.on('data', (chunk: any) => {\n\t\t\t\t\tuploadedSize += chunk.length;\n\t\t\t\t\tuploadObserverPool.next(uploadedSize);\n\t\t\t\t});\n\n\t\t\t\toptions.bodyStream.on('end', () => {\n\t\t\t\t\tuploadObserverPool.complete();\n\t\t\t\t\trequest.end();\n\t\t\t\t});\n\t\t\t} else if (options.body) {\n\t\t\t\tconst body = options.body.toString();\n\n\t\t\t\trequest.on('response', () => {\n\t\t\t\t\tuploadObserverPool.next(body.length);\n\t\t\t\t});\n\n\t\t\t\trequest.end(body);\n\t\t\t} else {\n\t\t\t\trequest.end();\n\t\t\t}\n\n\t\t\tif (options.timeout && options.timeout > 0 && options.timeout !== Infinity) {\n\t\t\t\ttimeoutHandle = createTimer(() => {\n\t\t\t\t\ttimeoutReject && timeoutReject(new TimeoutError('The request timed out'));\n\t\t\t\t}, options.timeout);\n\t\t\t}\n\t\t},\n\t\t() => {\n\t\t\trequest.abort();\n\t\t}\n\t).catch(function(error: Error): any {\n\t\tconst parsedUrl = urlUtil.parse(url);\n\n\t\tif (parsedUrl.auth) {\n\t\t\tparsedUrl.auth = '(redacted)';\n\t\t}\n\n\t\tconst sanitizedUrl = urlUtil.format(parsedUrl);\n\n\t\terror.message = '[' + requestOptions.method + ' ' + sanitizedUrl + '] ' + error.message;\n\t\tthrow error;\n\t});\n\n\trequestTask.upload = new Observable<number>((observer) => uploadObserverPool.add(observer));\n\n\treturn requestTask;\n}\n"]}